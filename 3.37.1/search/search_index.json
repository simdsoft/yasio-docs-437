{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\\uff0c\\\u3002]+"},"docs":[{"location":"","text":"yasio Documentation \u00b6 yasio is a multi-platform support c++11 library with focus on asio (asynchronous socket I/O) for any client application. Cross-platform: Compiler: Visual Studio 2013+ GCC4.7+ xcode9+ Other C++11,14,17 Compilers Architecture: x86, x64, ARM and etc. OS: Windows, macOS, Linux, FreeBSD, iOS, Android And etc. Quick Start \u00b6 This demo simply send http request to tool.chinaz.com and print resposne data. C++ #include \"yasio/yasio.hpp\" #include \"yasio/obstream.hpp\" using namespace yasio ; using namespace yasio :: inet ; int main () { io_service service ({ \"tool.chinaz.com\" , 80 }); service . set_option ( YOPT_S_DEFERRED_EVENT , 0 ); // dispatch network event on network thread service . start ([ & ]( event_ptr && ev ) { switch ( ev -> kind ()) { case YEK_PACKET : { auto packet = std :: move ( ev -> packet ()); fwrite ( packet . data (), packet . size (), 1 , stdout ); fflush ( stdout ); break ; } case YEK_CONNECT_RESPONSE : if ( ev -> status () == 0 ) { auto transport = ev -> transport (); if ( ev -> cindex () == 0 ) { obstream obs ; obs . write_bytes ( \"GET /index.htm HTTP/1.1 \\r\\n \" ); obs . write_bytes ( \"Host: tool.chinaz.com \\r\\n \" ); obs . write_bytes ( \"User-Agent: Mozilla/5.0 (Windows NT 10.0; \" \"WOW64) AppleWebKit/537.36 (KHTML, like Gecko) \" \"Chrome/87.0.4820.88 Safari/537.36 \\r\\n \" ); obs . write_bytes ( \"Accept: */*;q=0.8 \\r\\n \" ); obs . write_bytes ( \"Connection: Close \\r\\n\\r\\n \" ); service . write ( transport , std :: move ( obs . buffer ())); } } break ; case YEK_CONNECTION_LOST : printf ( \"The connection is lost. \\n \" ); break ; } }); // open channel 0 as tcp client service . open ( 0 , YCK_TCP_CLIENT ); getchar (); } Lua local ip138 = \"tool.chinaz.com\" local service = yasio . io_service . new ({ host = ip138 , port = 80 }) local respdata = \"\" service : start ( function ( ev ) local k = ev . kind () if ( k == yasio . YEK_PACKET ) then respdata = respdata .. ev : packet (): to_string () elseif k == yasio . YEK_CONNECT_RESPONSE then if ev : status () == 0 then -- connect succeed local transport = ev : transport () local obs = yasio . obstream . new () obs : write_bytes ( \"GET / HTTP/1.1 \\r\\n \" ) obs : write_bytes ( \"Host: \" .. ip138 .. \" \\r\\n \" ) obs : write_bytes ( \"User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36 \\r\\n \" ) obs : write_bytes ( \"Accept: */*;q=0.8 \\r\\n \" ) obs : write_bytes ( \"Connection: Close \\r\\n\\r\\n \" ) service : write ( transport , obs ) end elseif k == yasio . YEK_CONNECTION_LOST then print ( \"request finish, respdata: \" .. respdata ) end end ) -- Open channel 0 as tcp client and start non-blocking tcp 3 times handshake service : open ( 0 , yasio . YCK_TCP_CLIENT ) -- Call this function at thread which focus on the network event. function gDispatchNetworkEvent (...) service : dispatch ( 128 ) -- dispatch max events is 128 per frame end _G . yservice = service -- Store service to global table as a singleton instance The tests & examples \u00b6 tests: echo_server : TCP/UDP/KCP echo server echo_client : TCP/UDP/KCP echo client ssltest : SSL client test, Get github.com home page tcptest : TCP test speedtest : TCP,UDP,KCP local transfer mcast : multi-cast test program examples: ftp_server : A simple ftp server only support file download which is based on yasio\uff0c click to visit. lua : lua test contains http request\uff0cTCP unpack test code. xlua : Unity3D xlua Integration Demo. DemoUE4 : Unreal Engine 4 Integration Demo. Build tests & examples \u00b6 Ensure install compiler which support C++11, such as msvc , gcc , clang Ensure git , cmake installed Execute follow commands: git clone https://github.com/yasio/yasio cd yasio git submodule update --init --recursive cd build # for xcode should be: cmake .. -GXcode cmake .. cmake --build . --config Debug","title":"Home"},{"location":"#yasio-documentation","text":"yasio is a multi-platform support c++11 library with focus on asio (asynchronous socket I/O) for any client application. Cross-platform: Compiler: Visual Studio 2013+ GCC4.7+ xcode9+ Other C++11,14,17 Compilers Architecture: x86, x64, ARM and etc. OS: Windows, macOS, Linux, FreeBSD, iOS, Android And etc.","title":"yasio Documentation"},{"location":"#quick-start","text":"This demo simply send http request to tool.chinaz.com and print resposne data. C++ #include \"yasio/yasio.hpp\" #include \"yasio/obstream.hpp\" using namespace yasio ; using namespace yasio :: inet ; int main () { io_service service ({ \"tool.chinaz.com\" , 80 }); service . set_option ( YOPT_S_DEFERRED_EVENT , 0 ); // dispatch network event on network thread service . start ([ & ]( event_ptr && ev ) { switch ( ev -> kind ()) { case YEK_PACKET : { auto packet = std :: move ( ev -> packet ()); fwrite ( packet . data (), packet . size (), 1 , stdout ); fflush ( stdout ); break ; } case YEK_CONNECT_RESPONSE : if ( ev -> status () == 0 ) { auto transport = ev -> transport (); if ( ev -> cindex () == 0 ) { obstream obs ; obs . write_bytes ( \"GET /index.htm HTTP/1.1 \\r\\n \" ); obs . write_bytes ( \"Host: tool.chinaz.com \\r\\n \" ); obs . write_bytes ( \"User-Agent: Mozilla/5.0 (Windows NT 10.0; \" \"WOW64) AppleWebKit/537.36 (KHTML, like Gecko) \" \"Chrome/87.0.4820.88 Safari/537.36 \\r\\n \" ); obs . write_bytes ( \"Accept: */*;q=0.8 \\r\\n \" ); obs . write_bytes ( \"Connection: Close \\r\\n\\r\\n \" ); service . write ( transport , std :: move ( obs . buffer ())); } } break ; case YEK_CONNECTION_LOST : printf ( \"The connection is lost. \\n \" ); break ; } }); // open channel 0 as tcp client service . open ( 0 , YCK_TCP_CLIENT ); getchar (); } Lua local ip138 = \"tool.chinaz.com\" local service = yasio . io_service . new ({ host = ip138 , port = 80 }) local respdata = \"\" service : start ( function ( ev ) local k = ev . kind () if ( k == yasio . YEK_PACKET ) then respdata = respdata .. ev : packet (): to_string () elseif k == yasio . YEK_CONNECT_RESPONSE then if ev : status () == 0 then -- connect succeed local transport = ev : transport () local obs = yasio . obstream . new () obs : write_bytes ( \"GET / HTTP/1.1 \\r\\n \" ) obs : write_bytes ( \"Host: \" .. ip138 .. \" \\r\\n \" ) obs : write_bytes ( \"User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36 \\r\\n \" ) obs : write_bytes ( \"Accept: */*;q=0.8 \\r\\n \" ) obs : write_bytes ( \"Connection: Close \\r\\n\\r\\n \" ) service : write ( transport , obs ) end elseif k == yasio . YEK_CONNECTION_LOST then print ( \"request finish, respdata: \" .. respdata ) end end ) -- Open channel 0 as tcp client and start non-blocking tcp 3 times handshake service : open ( 0 , yasio . YCK_TCP_CLIENT ) -- Call this function at thread which focus on the network event. function gDispatchNetworkEvent (...) service : dispatch ( 128 ) -- dispatch max events is 128 per frame end _G . yservice = service -- Store service to global table as a singleton instance","title":"Quick Start"},{"location":"#the-tests-examples","text":"tests: echo_server : TCP/UDP/KCP echo server echo_client : TCP/UDP/KCP echo client ssltest : SSL client test, Get github.com home page tcptest : TCP test speedtest : TCP,UDP,KCP local transfer mcast : multi-cast test program examples: ftp_server : A simple ftp server only support file download which is based on yasio\uff0c click to visit. lua : lua test contains http request\uff0cTCP unpack test code. xlua : Unity3D xlua Integration Demo. DemoUE4 : Unreal Engine 4 Integration Demo.","title":"The tests &amp; examples"},{"location":"#build-tests-examples","text":"Ensure install compiler which support C++11, such as msvc , gcc , clang Ensure git , cmake installed Execute follow commands: git clone https://github.com/yasio/yasio cd yasio git submodule update --init --recursive cd build # for xcode should be: cmake .. -GXcode cmake .. cmake --build . --config Debug","title":"Build tests &amp; examples"},{"location":"faq/","text":"FAQ \u00b6 Can't load xlua bundle on macOS? The file xlua.bundle needs change attr by command sudo xattr -r -d com.apple.quarantine xlua.bundle","title":"FAQ"},{"location":"faq/#faq","text":"Can't load xlua bundle on macOS? The file xlua.bundle needs change attr by command sudo xattr -r -d com.apple.quarantine xlua.bundle","title":"FAQ"},{"location":"preprocessor/","text":"yasio Macros \u00b6 The macros listed in the table below may be used to control the interface, functionality, and behaviour of yasio . You can define them at yasio/detail/config.hpp or compiler preprocessors. Name Description YASIO_HAVE_KCP Whether enable kcp, default: off YASIO_HEADER_ONLY Whether enable header only, default: off YASIO_SSL_BACKEND Choose ssl backend, since 3.36.0 1 . Use OpenSSL 2 . Use mbedtls YASIO_ENABLE_UDS Whether enable unix domain socket support, current only unix-like system and win10 RS5 support this feature, default: off YASIO_HAVE_CARES Whether use c-ares to resolve domain name, default: off YASIO_VERBOSE_LOG Whether enable verbose log, default: off YASIO_NT_COMPAT_GAI Whether enable windows xp getaddrinfo API compatible, default: off YASIO_USE_SPSC_QUEUE Whether use SPSC queue, default: off YASIO_HAVE_HALF_FLOAT Whether enable half float, depends on half.hpp YASIO_DISABLE_OBJECT_POOL Whether disable object pool YASIO_DISABLE_CONCURRENT_SINGLETON Whether disable concurrent singleton","title":"Preprocessor"},{"location":"preprocessor/#yasio-macros","text":"The macros listed in the table below may be used to control the interface, functionality, and behaviour of yasio . You can define them at yasio/detail/config.hpp or compiler preprocessors. Name Description YASIO_HAVE_KCP Whether enable kcp, default: off YASIO_HEADER_ONLY Whether enable header only, default: off YASIO_SSL_BACKEND Choose ssl backend, since 3.36.0 1 . Use OpenSSL 2 . Use mbedtls YASIO_ENABLE_UDS Whether enable unix domain socket support, current only unix-like system and win10 RS5 support this feature, default: off YASIO_HAVE_CARES Whether use c-ares to resolve domain name, default: off YASIO_VERBOSE_LOG Whether enable verbose log, default: off YASIO_NT_COMPAT_GAI Whether enable windows xp getaddrinfo API compatible, default: off YASIO_USE_SPSC_QUEUE Whether use SPSC queue, default: off YASIO_HAVE_HALF_FLOAT Whether enable half float, depends on half.hpp YASIO_DISABLE_OBJECT_POOL Whether disable object pool YASIO_DISABLE_CONCURRENT_SINGLETON Whether disable concurrent singleton","title":"yasio Macros"},{"location":"api/reference/ibstream-class/","text":"ibstream_view Class \u00b6 Provides the functionality of Binary Reader. Syntax \u00b6 namespace yasio { using ibstream_view = basic_ibstream_view < endian :: network_convert_tag > ; using fast_ibstream_view = basic_ibstream_view < endian :: host_convert_tag > ; } Members \u00b6 Public Constructors \u00b6 Name Description ibstream_view::ibstream_view Constructs a ibstream_view object. Public Methods \u00b6 Name Description ibstream_view::reset Reset input data, weak reference. ibstream_view::read Function template, read number value. ibstream_view:read_ix Function template,read 7bit Encoded Int/Int64 . ibstream_view:read_v Read blob data with 7bit Encoded Int/Int64 lenght field . ibstream_view:read_byte Read 1 byte. ibstream_view:read_bytes Read blob data without length field. ibstream_view::empty Check is stream empty. ibstream_view::data Retrieves stream data pointer. ibstream_view::length Retrieves size of stream. ibstream_view::seek Moves the read position in a stream. Remarks \u00b6 This class is inspired from C++17 std::string_view, it never copy any buffer during initialize and read. Requirements \u00b6 Header: ibstream.hpp ibstream_view::ibstream_view \u00b6 Constructs a ibstream_view object. ibstream_view (); ibstream_view ( const void * data , size_t size ); ibstream_view ( const obstream * obs ); Parameters \u00b6 data The pointer to first byte of buffer. size The size of data. obs The obstream object. Example \u00b6 TODO: ibstream_view::reset \u00b6 Resets ibstream_view input buffer view. void ibstream_view::reset ( const void * data , size_t size ); Parameters \u00b6 data The pointer to first byte of buffer. size The size of data. ibstream_view::read \u00b6 Read number value from stream with byte order convertion. template < typename _Nty > _Nty ibstream_view :: read (); Return Value \u00b6 Returns the value to be read. Remarks \u00b6 The type _Nty of value could be any (1~8bytes) integral or float types. Example \u00b6 TODO: ibstream_view::read_ix \u00b6 Read 7Bit Encoded Int compressed value. template < typename _Intty > _Intty ibstream_view :: read_ix (); Return Value \u00b6 Returns the value to be read. Remarks \u00b6 The type _Intty of value must be one of follows int32_t int64_t This function behavior is compatible with dotnet BinaryReader.Read7BitEncodedInt() BinaryReader.Read7BitEncodedInt64() Example \u00b6 TODO: ibstream_view::read_v \u00b6 Read blob data with 7Bit Encoded Int length field. cxx17 :: string_view read_v (); Return Value \u00b6 Returns the blob view to be read Remarks \u00b6 This function will read length field with 7Bit Encoded first, then call read_bytes to read the value. Example \u00b6 TODO: ibstream_view::read_byte \u00b6 Read 1 byte from stream. uint8_t read_byte (); Return Value \u00b6 Returns the value to be read. Remarks \u00b6 This function is identical to ibstream_view::read Example \u00b6 TODO: ibstream_view::read_bytes \u00b6 Read byte array from stream. cxx17 :: string_view read_bytes (); Return Value \u00b6 The blob view to be read. Example \u00b6 TODO: ibstream_view::empty \u00b6 Tests whether the ibstream_view is empty. bool empty () const ; Return Value \u00b6 true if the ibstream_view empty; false if it has at least one byte. Remarks \u00b6 The member function is equivalent to length == 0. Example \u00b6 TODO: ibstream_view::data \u00b6 Retrieves stream data pointer. const char * data () const ; Return Value \u00b6 A pointer to the first byte in the stream. Example \u00b6 TODO: ibstream_view::length \u00b6 Returns the number of bytes in the stream. size_t length () const ; Return Value \u00b6 The current length of the stream. Example \u00b6 TODO: ibstream_view::seek \u00b6 Moves the read position in a stream. ptrdiff_t seek ( ptrdiff_t offset , int whence ); Parameters \u00b6 offset \\ An offset to move the read pointer relative to whence . whence \\ One of the SEEK_SET , SEEK_CUR , SEEK_END enumerations. Return Value \u00b6 The current read poistion of the stream after seek. Example \u00b6 TODO: ibstream Class \u00b6 Provides the functionality of Binary Reader with buffer storage. Syntax \u00b6 namespace yasio { using ibstream = basic_ibstream < endian :: network_convert_tag > ; using fast_ibstream = basic_ibstream < endian :: host_convert_tag > ; } Members \u00b6 Public Constructors \u00b6 Name Description ibstream::ibstream Constructs a ibstream object. Public Methods \u00b6 Name Description ibstream::load Load stream from file. Inheritance Hierarchy \u00b6 ibstream_view ibstream ibstream::ibstream \u00b6 Constructs a ibstream object. ibstream ( std :: vector < char > blob ); ibstream ( const obstream * obs ); Parameters \u00b6 blob The input binary buffer. obs The obstream object. Example \u00b6 TODO: ibstream::load \u00b6 Load the stream data from file. bool load ( const char * filename ) const ; Return Value \u00b6 true succed, false fail. Example \u00b6 See: obstream::save See also \u00b6 obstream Class io_service Class","title":"ibstream Class"},{"location":"api/reference/ibstream-class/#ibstream_view-class","text":"Provides the functionality of Binary Reader.","title":"ibstream_view Class"},{"location":"api/reference/ibstream-class/#syntax","text":"namespace yasio { using ibstream_view = basic_ibstream_view < endian :: network_convert_tag > ; using fast_ibstream_view = basic_ibstream_view < endian :: host_convert_tag > ; }","title":"Syntax"},{"location":"api/reference/ibstream-class/#members","text":"","title":"Members"},{"location":"api/reference/ibstream-class/#public-constructors","text":"Name Description ibstream_view::ibstream_view Constructs a ibstream_view object.","title":"Public Constructors"},{"location":"api/reference/ibstream-class/#public-methods","text":"Name Description ibstream_view::reset Reset input data, weak reference. ibstream_view::read Function template, read number value. ibstream_view:read_ix Function template,read 7bit Encoded Int/Int64 . ibstream_view:read_v Read blob data with 7bit Encoded Int/Int64 lenght field . ibstream_view:read_byte Read 1 byte. ibstream_view:read_bytes Read blob data without length field. ibstream_view::empty Check is stream empty. ibstream_view::data Retrieves stream data pointer. ibstream_view::length Retrieves size of stream. ibstream_view::seek Moves the read position in a stream.","title":"Public Methods"},{"location":"api/reference/ibstream-class/#remarks","text":"This class is inspired from C++17 std::string_view, it never copy any buffer during initialize and read.","title":"Remarks"},{"location":"api/reference/ibstream-class/#requirements","text":"Header: ibstream.hpp","title":"Requirements"},{"location":"api/reference/ibstream-class/#ibstream_viewibstream_view","text":"Constructs a ibstream_view object. ibstream_view (); ibstream_view ( const void * data , size_t size ); ibstream_view ( const obstream * obs );","title":" ibstream_view::ibstream_view"},{"location":"api/reference/ibstream-class/#parameters","text":"data The pointer to first byte of buffer. size The size of data. obs The obstream object.","title":"Parameters"},{"location":"api/reference/ibstream-class/#example","text":"TODO:","title":"Example"},{"location":"api/reference/ibstream-class/#ibstream_viewreset","text":"Resets ibstream_view input buffer view. void ibstream_view::reset ( const void * data , size_t size );","title":" ibstream_view::reset"},{"location":"api/reference/ibstream-class/#parameters_1","text":"data The pointer to first byte of buffer. size The size of data.","title":"Parameters"},{"location":"api/reference/ibstream-class/#ibstream_viewread","text":"Read number value from stream with byte order convertion. template < typename _Nty > _Nty ibstream_view :: read ();","title":" ibstream_view::read"},{"location":"api/reference/ibstream-class/#return-value","text":"Returns the value to be read.","title":"Return Value"},{"location":"api/reference/ibstream-class/#remarks_1","text":"The type _Nty of value could be any (1~8bytes) integral or float types.","title":"Remarks"},{"location":"api/reference/ibstream-class/#example_1","text":"TODO:","title":"Example"},{"location":"api/reference/ibstream-class/#ibstream_viewread_ix","text":"Read 7Bit Encoded Int compressed value. template < typename _Intty > _Intty ibstream_view :: read_ix ();","title":" ibstream_view::read_ix"},{"location":"api/reference/ibstream-class/#return-value_1","text":"Returns the value to be read.","title":"Return Value"},{"location":"api/reference/ibstream-class/#remarks_2","text":"The type _Intty of value must be one of follows int32_t int64_t This function behavior is compatible with dotnet BinaryReader.Read7BitEncodedInt() BinaryReader.Read7BitEncodedInt64()","title":"Remarks"},{"location":"api/reference/ibstream-class/#example_2","text":"TODO:","title":"Example"},{"location":"api/reference/ibstream-class/#ibstream_viewread_v","text":"Read blob data with 7Bit Encoded Int length field. cxx17 :: string_view read_v ();","title":" ibstream_view::read_v"},{"location":"api/reference/ibstream-class/#return-value_2","text":"Returns the blob view to be read","title":"Return Value"},{"location":"api/reference/ibstream-class/#remarks_3","text":"This function will read length field with 7Bit Encoded first, then call read_bytes to read the value.","title":"Remarks"},{"location":"api/reference/ibstream-class/#example_3","text":"TODO:","title":"Example"},{"location":"api/reference/ibstream-class/#ibstream_viewread_byte","text":"Read 1 byte from stream. uint8_t read_byte ();","title":" ibstream_view::read_byte"},{"location":"api/reference/ibstream-class/#return-value_3","text":"Returns the value to be read.","title":"Return Value"},{"location":"api/reference/ibstream-class/#remarks_4","text":"This function is identical to ibstream_view::read","title":"Remarks"},{"location":"api/reference/ibstream-class/#example_4","text":"TODO:","title":"Example"},{"location":"api/reference/ibstream-class/#ibstream_viewread_bytes","text":"Read byte array from stream. cxx17 :: string_view read_bytes ();","title":" ibstream_view::read_bytes"},{"location":"api/reference/ibstream-class/#return-value_4","text":"The blob view to be read.","title":"Return Value"},{"location":"api/reference/ibstream-class/#example_5","text":"TODO:","title":"Example"},{"location":"api/reference/ibstream-class/#ibstream_viewempty","text":"Tests whether the ibstream_view is empty. bool empty () const ;","title":" ibstream_view::empty"},{"location":"api/reference/ibstream-class/#return-value_5","text":"true if the ibstream_view empty; false if it has at least one byte.","title":"Return Value"},{"location":"api/reference/ibstream-class/#remarks_5","text":"The member function is equivalent to length == 0.","title":"Remarks"},{"location":"api/reference/ibstream-class/#example_6","text":"TODO:","title":"Example"},{"location":"api/reference/ibstream-class/#ibstream_viewdata","text":"Retrieves stream data pointer. const char * data () const ;","title":" ibstream_view::data"},{"location":"api/reference/ibstream-class/#return-value_6","text":"A pointer to the first byte in the stream.","title":"Return Value"},{"location":"api/reference/ibstream-class/#example_7","text":"TODO:","title":"Example"},{"location":"api/reference/ibstream-class/#ibstream_viewlength","text":"Returns the number of bytes in the stream. size_t length () const ;","title":" ibstream_view::length"},{"location":"api/reference/ibstream-class/#return-value_7","text":"The current length of the stream.","title":"Return Value"},{"location":"api/reference/ibstream-class/#example_8","text":"TODO:","title":"Example"},{"location":"api/reference/ibstream-class/#ibstream_viewseek","text":"Moves the read position in a stream. ptrdiff_t seek ( ptrdiff_t offset , int whence );","title":" ibstream_view::seek"},{"location":"api/reference/ibstream-class/#parameters_2","text":"offset \\ An offset to move the read pointer relative to whence . whence \\ One of the SEEK_SET , SEEK_CUR , SEEK_END enumerations.","title":"Parameters"},{"location":"api/reference/ibstream-class/#return-value_8","text":"The current read poistion of the stream after seek.","title":"Return Value"},{"location":"api/reference/ibstream-class/#example_9","text":"TODO:","title":"Example"},{"location":"api/reference/ibstream-class/#ibstream-class","text":"Provides the functionality of Binary Reader with buffer storage.","title":"ibstream Class"},{"location":"api/reference/ibstream-class/#syntax_1","text":"namespace yasio { using ibstream = basic_ibstream < endian :: network_convert_tag > ; using fast_ibstream = basic_ibstream < endian :: host_convert_tag > ; }","title":"Syntax"},{"location":"api/reference/ibstream-class/#members_1","text":"","title":"Members"},{"location":"api/reference/ibstream-class/#public-constructors_1","text":"Name Description ibstream::ibstream Constructs a ibstream object.","title":"Public Constructors"},{"location":"api/reference/ibstream-class/#public-methods_1","text":"Name Description ibstream::load Load stream from file.","title":"Public Methods"},{"location":"api/reference/ibstream-class/#inheritance-hierarchy","text":"ibstream_view ibstream","title":"Inheritance Hierarchy"},{"location":"api/reference/ibstream-class/#ibstreamibstream","text":"Constructs a ibstream object. ibstream ( std :: vector < char > blob ); ibstream ( const obstream * obs );","title":" ibstream::ibstream"},{"location":"api/reference/ibstream-class/#parameters_3","text":"blob The input binary buffer. obs The obstream object.","title":"Parameters"},{"location":"api/reference/ibstream-class/#example_10","text":"TODO:","title":"Example"},{"location":"api/reference/ibstream-class/#ibstreamload","text":"Load the stream data from file. bool load ( const char * filename ) const ;","title":" ibstream::load"},{"location":"api/reference/ibstream-class/#return-value_9","text":"true succed, false fail.","title":"Return Value"},{"location":"api/reference/ibstream-class/#example_11","text":"See: obstream::save","title":"Example"},{"location":"api/reference/ibstream-class/#see-also","text":"obstream Class io_service Class","title":"See also"},{"location":"api/reference/io_channel-class/","text":"io_channel Class \u00b6 Provides the functionality of establishing tcp/udp/kcp connections. Syntax \u00b6 namespace yasio { namespace inet { class io_channel ; } } Public Methods \u00b6 Name Description io_channel::get_service Gets belong service of channel. io_channel::index Gets index of channel at service. io_channel::remote_port Gets remote port of channel. Remarks \u00b6 Once io_service initialized, the max count of channel can't be changed. Retrieves through io_service::channel_at . io_channel::get_service \u00b6 Gets owner service. io_service & get_service () io_channel::index \u00b6 Gets channel index at service. int index () const io_channel::remote_port \u00b6 Gets remote port. u_short remote_port () const ; Return value \u00b6 Return remote port of channel For client channel, it's port to connect. For server channel, it's port to listen. See also \u00b6 io_service Class io_event Class","title":"io_channel Class"},{"location":"api/reference/io_channel-class/#io_channel-class","text":"Provides the functionality of establishing tcp/udp/kcp connections.","title":"io_channel Class"},{"location":"api/reference/io_channel-class/#syntax","text":"namespace yasio { namespace inet { class io_channel ; } }","title":"Syntax"},{"location":"api/reference/io_channel-class/#public-methods","text":"Name Description io_channel::get_service Gets belong service of channel. io_channel::index Gets index of channel at service. io_channel::remote_port Gets remote port of channel.","title":"Public Methods"},{"location":"api/reference/io_channel-class/#remarks","text":"Once io_service initialized, the max count of channel can't be changed. Retrieves through io_service::channel_at .","title":"Remarks"},{"location":"api/reference/io_channel-class/#io_channelget_service","text":"Gets owner service. io_service & get_service ()","title":" io_channel::get_service"},{"location":"api/reference/io_channel-class/#io_channelindex","text":"Gets channel index at service. int index () const","title":" io_channel::index"},{"location":"api/reference/io_channel-class/#io_channelremote_port","text":"Gets remote port. u_short remote_port () const ;","title":" io_channel::remote_port"},{"location":"api/reference/io_channel-class/#return-value","text":"Return remote port of channel For client channel, it's port to connect. For server channel, it's port to listen.","title":"Return value"},{"location":"api/reference/io_channel-class/#see-also","text":"io_service Class io_event Class","title":"See also"},{"location":"api/reference/io_event-class/","text":"io_event Class \u00b6 The event produced by io_service thread. Syntax \u00b6 namespace yasio { namespace inet { class io_event ; } } Public Methods \u00b6 Name Description io_event::kind Gets kind of event. io_event::status Gets status of event. io_event::packet Gets packet of event. io_event::timestamp Gets timestamp of event. io_event::transport Gets transport of event. io_event::transport_id Gets transport id of event. io_event::transport_udata Gets/Sets transport user data. .. _kind: io_event::kind \u00b6 Gets kind of event. int kind () const ; Return value \u00b6 Return the kind value, can be follow values YEK_PACKET : Packet event YEK_CONNECT_RESPONSE : Connect response event YEK_CONNECTION_LOST : Connection lost event io_event::status \u00b6 Gets the status of event. int status () const ; Return Value \u00b6 0: No error NZ: error occured, user only needs print the error status code. io_event::packet \u00b6 Gets packet of event. std :: vector < char >& packet () Return value \u00b6 Return the mutable reference to packet of event, user can use std::move to move it. io_event::timestamp \u00b6 Get timestamp in microseconds of event. highp_time_t timestamp () const ; Return value \u00b6 Return the timestamp in macroseconds. io_event::transport_id \u00b6 Gets transport unique id. unsigned int transport_id () const ; Return Value \u00b6 Return a unique id range in 32 bit uint. io_event::transport_udata \u00b6 Sets or Gets transport userdata. template < typename _Uty > _Uty io_event :: transport_udata (); template < typename _Uty > void io_event :: transport_udata ( _Uty uservalue ); Remark \u00b6 User should manage the gc of userdata, such as: Store userdata when receive connect success event. Cleanup the userdata when receive connection lost. See also \u00b6 io_service Class io_channel Class","title":"io_event Class"},{"location":"api/reference/io_event-class/#io_event-class","text":"The event produced by io_service thread.","title":"io_event Class"},{"location":"api/reference/io_event-class/#syntax","text":"namespace yasio { namespace inet { class io_event ; } }","title":"Syntax"},{"location":"api/reference/io_event-class/#public-methods","text":"Name Description io_event::kind Gets kind of event. io_event::status Gets status of event. io_event::packet Gets packet of event. io_event::timestamp Gets timestamp of event. io_event::transport Gets transport of event. io_event::transport_id Gets transport id of event. io_event::transport_udata Gets/Sets transport user data. .. _kind:","title":"Public Methods"},{"location":"api/reference/io_event-class/#io_eventkind","text":"Gets kind of event. int kind () const ;","title":" io_event::kind"},{"location":"api/reference/io_event-class/#return-value","text":"Return the kind value, can be follow values YEK_PACKET : Packet event YEK_CONNECT_RESPONSE : Connect response event YEK_CONNECTION_LOST : Connection lost event","title":"Return value"},{"location":"api/reference/io_event-class/#io_eventstatus","text":"Gets the status of event. int status () const ;","title":" io_event::status"},{"location":"api/reference/io_event-class/#return-value_1","text":"0: No error NZ: error occured, user only needs print the error status code.","title":"Return Value"},{"location":"api/reference/io_event-class/#io_eventpacket","text":"Gets packet of event. std :: vector < char >& packet ()","title":" io_event::packet"},{"location":"api/reference/io_event-class/#return-value_2","text":"Return the mutable reference to packet of event, user can use std::move to move it.","title":"Return value"},{"location":"api/reference/io_event-class/#io_eventtimestamp","text":"Get timestamp in microseconds of event. highp_time_t timestamp () const ;","title":" io_event::timestamp"},{"location":"api/reference/io_event-class/#return-value_3","text":"Return the timestamp in macroseconds.","title":"Return value"},{"location":"api/reference/io_event-class/#io_eventtransport_id","text":"Gets transport unique id. unsigned int transport_id () const ;","title":" io_event::transport_id"},{"location":"api/reference/io_event-class/#return-value_4","text":"Return a unique id range in 32 bit uint.","title":"Return Value"},{"location":"api/reference/io_event-class/#io_eventtransport_udata","text":"Sets or Gets transport userdata. template < typename _Uty > _Uty io_event :: transport_udata (); template < typename _Uty > void io_event :: transport_udata ( _Uty uservalue );","title":" io_event::transport_udata"},{"location":"api/reference/io_event-class/#remark","text":"User should manage the gc of userdata, such as: Store userdata when receive connect success event. Cleanup the userdata when receive connection lost.","title":"Remark"},{"location":"api/reference/io_event-class/#see-also","text":"io_service Class io_channel Class","title":"See also"},{"location":"api/reference/io_service-class/","text":"io_service Class \u00b6 Provides the functionality of tcp, udp, kcp and ssl-client communication with noblocking-io model. Syntax \u00b6 namespace yasio { namespace inet { class io_service ; } } Members \u00b6 Public Constructors \u00b6 Name Description io_service::io_service Constructs a io_service object. Public Methods \u00b6 Name Description io_service::start Start the network service thread. io_service::stop Stop the network service thread. io_service::open Open channel. io_service::close Close transport. io_service::is_open Tests whether channel or transport is open. io_service::dispatch Dispatch the network io events. io_service::write Sends data asynchronous. io_service::write_to Sends data to specific remote asynchronous. io_service::schedule Save the stream binary data to file. io_service::init_globals Init global data with print function callback. io_service::cleanup_globals Cleanup the global print function callback. io_service::channel_at Retrieves the channel by index. io_service::set_option Set options. Remarks \u00b6 By default, the transport use object_pool. Requirements \u00b6 Header: yasio.hpp io_service::io_service \u00b6 Constructs a io_service object. io_service :: io_service (); io_service :: io_service ( int channel_count ); io_service :: io_service ( const io_hostent & channel_ep ); io_service :: io_service ( const io_hostent * channel_eps , int channel_count ); Parameters \u00b6 channel_count The channel count. channel_ep The channel endpoint. channel_eps The first pointer of channel endpoints. Example \u00b6 #include \"yasio/yasio.hpp\" int main () { using namespace yasio ; using namespace yasio :: inet ; io_service s1 ; // s1 only support 1 channel io_service s2 ( 5 ); // s2 support 5 channels concurrency io_service s3 ( io_hostent { \"github.com\" , 443 }); // s3 support 1 channel io_hostent hosts [] = { { \"192.168.1.66\" , 20336 }, { \"192.168.1.88\" , 20337 }, }; io_service s4 ( hosts , YASIO_ARRAYSIZE ( hosts )); // s4 support 2 channels concurrency return 0 ; } io_service::start \u00b6 Start the network service thread. void start ( io_event_cb_t cb ); Parameters \u00b6 cb The callback to receive network io events. Example \u00b6 #include \"yasio/yasio.hpp\" int main () { using namespace yasio ; using namespace yasio :: inet ; auto service = yasio_shared_service ( io_hostent { host = \"ip138.com\" , port = 80 }); service -> start ([]( event_ptr && ev ) { auto kind = ev -> kind (); if ( kind == YEK_CONNECT_RESPONSE ) { if ( ev -> status () == 0 ) printf ( \"[%d] connect succeed. \\n \" , ev -> cindex ()); else printf ( \"[%d] connect failed! \\n \" , ev -> cindex ()); } }); return 0 ; } io_service::stop \u00b6 Stop network service thread. void stop () Remarks \u00b6 If the network service thread running, this function will post exit signal and wait it exit properly. Example \u00b6 TODO: io_service::open \u00b6 Open a channel. void open ( size_t cindex , int kind ); Parameters \u00b6 cindex The index of channel. kind The kind of channel. Remarks \u00b6 For tcp, will start the non-blocking 3 times handshake to establish tcp connection. The cindex value must be less than max channels supported by this io_service. The kind must be follow values YCK_TCP_CLIENT YCK_TCP_SERVER YCK_UDP_CLIENT YCK_UDP_SERVER YCK_KCP_CLIENT YCK_KCP_SERVER YCK_SSL_CLIENT Example \u00b6 TODO: io_service::close \u00b6 Close the channel or transport. void close ( transport_handle_t transport ); void close ( int cindex ); Parameters \u00b6 transport The transport to be close. cindex The channel index to be close. Remarks \u00b6 For tcp, will trigger 4 times handsake to terminate the connection. Example \u00b6 TODO: io_service::is_open \u00b6 Tests whether the transport or channel is open. bool is_open ( transport_handle_t transport ) const ; bool is_open ( int cindex ) const ; Parameters \u00b6 transport The transport to be tests. cindex The index of channel to be tests. Example \u00b6 TODO: io_service::dispatch \u00b6 Consume network events queue and dispatch them. void dispatch ( int max_count ); Parameters \u00b6 max_count The max count allow to dispatch at this time. Remarks \u00b6 Usually, this function should call at logic thread, such as cocos2d-x render thread or other game engine main thread. It's useful to update game ui safety. Example \u00b6 yasio_shared_service () -> dispatch ( 128 ); io_service::write \u00b6 Sends data asynchronous. int write ( transport_handle_t thandle , std :: vector < char > buffer , io_completion_cb_t completion_handler = nullptr ); Parameters \u00b6 thandle The transport handle to send. buffer The send buffer. completion_handler The completion handler for send operation. Return Value \u00b6 A number of bytes to sends, error occured when < 0. Remarks \u00b6 The completion_handler not support KCP. The empty buffer will be ignored and not trigger completion_handler. Example \u00b6 TODO: io_service::write_to \u00b6 Sends data asynchronous. int write_to ( transport_handle_t thandle , std :: vector < char > buffer , const ip :: endpoint & to , io_completion_cb_t completion_handler = nullptr ); Parameters \u00b6 thandle The transport handle to send. buffer The send buffer. to The remote endpoint for send operation. completion_handler The completion handler for send operation. Return Value \u00b6 A number of bytes to be send, error occured when < 0. Remarks \u00b6 This function only works for DGRAM transport udp,kcp The completion_handler not support KCP. The empty buffer will be ignored and not trigger completion_handler. Example \u00b6 TODO: io_service::schedule \u00b6 Schedule a timer which will dispatch on the network service thread. highp_timer_ptr schedule ( const std :: chrono :: microseconds & duration , timer_cb_t cb ); Parameters \u00b6 duration The timer expire duration. cb The callback to execute when the timer is expired. Return Value \u00b6 The shared_ptr of the high resolution timer. Example \u00b6 // Register a once timer, timeout is 3 seconds. yasio_shared_service () -> schedule ( std :: chrono :: seconds ( 3 ), []() -> bool { printf ( \"time called! \\n \" ); return true ; }); // Register a loop timer, interval is 5 seconds. auto loopTimer = yasio_shared_service () -> schedule ( std :: chrono :: seconds ( 5 ), []() -> bool { printf ( \"time called! \\n \" ); return false ; }); io_service::init_globals \u00b6 Explicit init global data with print function callback. static void init_globals ( print_fn2_t print_fn ); Parameters \u00b6 print_fn The custom print function to print network service log. Remarks \u00b6 This function is optional, it's useful to redirect network service log to your custom log system, such as ue4,u3d, see the example. Example \u00b6 // yasio_uelua.cpp // compile with: /EHsc #include \"yasio_uelua.h\" #include \"yasio/platform/yasio_ue4.hpp\" #include \"lua.hpp\" #if defined(NS_SLUA) using namespace NS_SLUA ; #endif #include \"yasio/bindings/lyasio.cpp\" DECLARE_LOG_CATEGORY_EXTERN ( yasio_ue4 , Log , All ); DEFINE_LOG_CATEGORY ( yasio_ue4 ); void yasio_uelua_init ( void * L ) { auto Ls = ( lua_State * ) L ; print_fn2_t log_cb = []( int level , const char * msg ) { FString text ( msg ); const TCHAR * tstr = * text ; UE_LOG ( yasio_ue4 , Log , L \"%s\" , tstr ); }; io_service :: init_globals ( log_cb ); luaregister_yasio ( Ls ); } void yasio_uelua_cleanup () { io_service :: cleanup_globals (); } io_service::cleanup_globals \u00b6 Clear custom print function object. static void cleanup_globals (); Remarks \u00b6 You should call this function before unload a module(.dll,.so) which contains custom print function object. io_service::channel_at \u00b6 Retrieves channel by index. io_channel * channel_at ( size_t cindex ) const ; Parameters \u00b6 cindex The index of channel. Return value \u00b6 The channel pointer, will be nullptr if the index out-of-range. io_service::set_option \u00b6 Set current io_service option. void set_option ( int opt , ...); Parameters \u00b6 opt The opt value, see YOPT_X_XXX . Example \u00b6 #include \"yasio/yasio.hpp\" int main (){ using namespace yasio ; using namespace yasio :: inet ; io_hostent hosts [] = { { \"192.168.1.66\" , 20336 }, { \"192.168.1.88\" , 20337 }, }; auto service = std :: make_shared < io_service > ( hosts , YASIO_ARRAYSIZE ( hosts )); // for application protocol with length field, you just needs set this option. // it's similar to java netty length frame based decode. // such as when your protocol define as following // packet.header: (header.len=12bytes) // code:int16_t // datalen:int32_t (not contains packet.header.len) // timestamp:int32_t // crc16:int16_t // packet.data service -> set_option ( YOPT_C_LFBFD_PARAMS , 0 , // channelIndex, the channel index 65535 , // maxFrameLength, max packet size 2 , // lenghtFieldOffset, the offset of length field 4 , // lengthFieldLength, the size of length field, can be 1,2,4 12 , // lengthAdjustment\uff1aif the value of length feild == packet.header.len + packet.data.len, this parameter should be 0, otherwise should be sizeof(packet.header) ); // for application protocol without length field, just sets length field size to -1. // then io_service will dispatch any packet received from server immediately, // such as http request, this is default behavior of channel. service -> set_option ( YOPT_C_LFBFD_PARAMS , 1 , 65535 , -1 , 0 , 0 ); return 0 ; } See also \u00b6 io_event Class io_channel Class io_service Options xxsocket Class obstream Class ibstream_view Class ibstream Class","title":"io_service Class"},{"location":"api/reference/io_service-class/#io_service-class","text":"Provides the functionality of tcp, udp, kcp and ssl-client communication with noblocking-io model.","title":"io_service Class"},{"location":"api/reference/io_service-class/#syntax","text":"namespace yasio { namespace inet { class io_service ; } }","title":"Syntax"},{"location":"api/reference/io_service-class/#members","text":"","title":"Members"},{"location":"api/reference/io_service-class/#public-constructors","text":"Name Description io_service::io_service Constructs a io_service object.","title":"Public Constructors"},{"location":"api/reference/io_service-class/#public-methods","text":"Name Description io_service::start Start the network service thread. io_service::stop Stop the network service thread. io_service::open Open channel. io_service::close Close transport. io_service::is_open Tests whether channel or transport is open. io_service::dispatch Dispatch the network io events. io_service::write Sends data asynchronous. io_service::write_to Sends data to specific remote asynchronous. io_service::schedule Save the stream binary data to file. io_service::init_globals Init global data with print function callback. io_service::cleanup_globals Cleanup the global print function callback. io_service::channel_at Retrieves the channel by index. io_service::set_option Set options.","title":"Public Methods"},{"location":"api/reference/io_service-class/#remarks","text":"By default, the transport use object_pool.","title":"Remarks"},{"location":"api/reference/io_service-class/#requirements","text":"Header: yasio.hpp","title":"Requirements"},{"location":"api/reference/io_service-class/#io_serviceio_service","text":"Constructs a io_service object. io_service :: io_service (); io_service :: io_service ( int channel_count ); io_service :: io_service ( const io_hostent & channel_ep ); io_service :: io_service ( const io_hostent * channel_eps , int channel_count );","title":" io_service::io_service"},{"location":"api/reference/io_service-class/#parameters","text":"channel_count The channel count. channel_ep The channel endpoint. channel_eps The first pointer of channel endpoints.","title":"Parameters"},{"location":"api/reference/io_service-class/#example","text":"#include \"yasio/yasio.hpp\" int main () { using namespace yasio ; using namespace yasio :: inet ; io_service s1 ; // s1 only support 1 channel io_service s2 ( 5 ); // s2 support 5 channels concurrency io_service s3 ( io_hostent { \"github.com\" , 443 }); // s3 support 1 channel io_hostent hosts [] = { { \"192.168.1.66\" , 20336 }, { \"192.168.1.88\" , 20337 }, }; io_service s4 ( hosts , YASIO_ARRAYSIZE ( hosts )); // s4 support 2 channels concurrency return 0 ; }","title":"Example"},{"location":"api/reference/io_service-class/#io_servicestart","text":"Start the network service thread. void start ( io_event_cb_t cb );","title":" io_service::start"},{"location":"api/reference/io_service-class/#parameters_1","text":"cb The callback to receive network io events.","title":"Parameters"},{"location":"api/reference/io_service-class/#example_1","text":"#include \"yasio/yasio.hpp\" int main () { using namespace yasio ; using namespace yasio :: inet ; auto service = yasio_shared_service ( io_hostent { host = \"ip138.com\" , port = 80 }); service -> start ([]( event_ptr && ev ) { auto kind = ev -> kind (); if ( kind == YEK_CONNECT_RESPONSE ) { if ( ev -> status () == 0 ) printf ( \"[%d] connect succeed. \\n \" , ev -> cindex ()); else printf ( \"[%d] connect failed! \\n \" , ev -> cindex ()); } }); return 0 ; }","title":"Example"},{"location":"api/reference/io_service-class/#io_servicestop","text":"Stop network service thread. void stop ()","title":" io_service::stop"},{"location":"api/reference/io_service-class/#remarks_1","text":"If the network service thread running, this function will post exit signal and wait it exit properly.","title":"Remarks"},{"location":"api/reference/io_service-class/#example_2","text":"TODO:","title":"Example"},{"location":"api/reference/io_service-class/#io_serviceopen","text":"Open a channel. void open ( size_t cindex , int kind );","title":" io_service::open"},{"location":"api/reference/io_service-class/#parameters_2","text":"cindex The index of channel. kind The kind of channel.","title":"Parameters"},{"location":"api/reference/io_service-class/#remarks_2","text":"For tcp, will start the non-blocking 3 times handshake to establish tcp connection. The cindex value must be less than max channels supported by this io_service. The kind must be follow values YCK_TCP_CLIENT YCK_TCP_SERVER YCK_UDP_CLIENT YCK_UDP_SERVER YCK_KCP_CLIENT YCK_KCP_SERVER YCK_SSL_CLIENT","title":"Remarks"},{"location":"api/reference/io_service-class/#example_3","text":"TODO:","title":"Example"},{"location":"api/reference/io_service-class/#io_serviceclose","text":"Close the channel or transport. void close ( transport_handle_t transport ); void close ( int cindex );","title":" io_service::close"},{"location":"api/reference/io_service-class/#parameters_3","text":"transport The transport to be close. cindex The channel index to be close.","title":"Parameters"},{"location":"api/reference/io_service-class/#remarks_3","text":"For tcp, will trigger 4 times handsake to terminate the connection.","title":"Remarks"},{"location":"api/reference/io_service-class/#example_4","text":"TODO:","title":"Example"},{"location":"api/reference/io_service-class/#io_serviceis_open","text":"Tests whether the transport or channel is open. bool is_open ( transport_handle_t transport ) const ; bool is_open ( int cindex ) const ;","title":" io_service::is_open"},{"location":"api/reference/io_service-class/#parameters_4","text":"transport The transport to be tests. cindex The index of channel to be tests.","title":"Parameters"},{"location":"api/reference/io_service-class/#example_5","text":"TODO:","title":"Example"},{"location":"api/reference/io_service-class/#io_servicedispatch","text":"Consume network events queue and dispatch them. void dispatch ( int max_count );","title":" io_service::dispatch"},{"location":"api/reference/io_service-class/#parameters_5","text":"max_count The max count allow to dispatch at this time.","title":"Parameters"},{"location":"api/reference/io_service-class/#remarks_4","text":"Usually, this function should call at logic thread, such as cocos2d-x render thread or other game engine main thread. It's useful to update game ui safety.","title":"Remarks"},{"location":"api/reference/io_service-class/#example_6","text":"yasio_shared_service () -> dispatch ( 128 );","title":"Example"},{"location":"api/reference/io_service-class/#io_servicewrite","text":"Sends data asynchronous. int write ( transport_handle_t thandle , std :: vector < char > buffer , io_completion_cb_t completion_handler = nullptr );","title":" io_service::write"},{"location":"api/reference/io_service-class/#parameters_6","text":"thandle The transport handle to send. buffer The send buffer. completion_handler The completion handler for send operation.","title":"Parameters"},{"location":"api/reference/io_service-class/#return-value","text":"A number of bytes to sends, error occured when < 0.","title":"Return Value"},{"location":"api/reference/io_service-class/#remarks_5","text":"The completion_handler not support KCP. The empty buffer will be ignored and not trigger completion_handler.","title":"Remarks"},{"location":"api/reference/io_service-class/#example_7","text":"TODO:","title":"Example"},{"location":"api/reference/io_service-class/#io_servicewrite_to","text":"Sends data asynchronous. int write_to ( transport_handle_t thandle , std :: vector < char > buffer , const ip :: endpoint & to , io_completion_cb_t completion_handler = nullptr );","title":" io_service::write_to"},{"location":"api/reference/io_service-class/#parameters_7","text":"thandle The transport handle to send. buffer The send buffer. to The remote endpoint for send operation. completion_handler The completion handler for send operation.","title":"Parameters"},{"location":"api/reference/io_service-class/#return-value_1","text":"A number of bytes to be send, error occured when < 0.","title":"Return Value"},{"location":"api/reference/io_service-class/#remarks_6","text":"This function only works for DGRAM transport udp,kcp The completion_handler not support KCP. The empty buffer will be ignored and not trigger completion_handler.","title":"Remarks"},{"location":"api/reference/io_service-class/#example_8","text":"TODO:","title":"Example"},{"location":"api/reference/io_service-class/#io_serviceschedule","text":"Schedule a timer which will dispatch on the network service thread. highp_timer_ptr schedule ( const std :: chrono :: microseconds & duration , timer_cb_t cb );","title":" io_service::schedule"},{"location":"api/reference/io_service-class/#parameters_8","text":"duration The timer expire duration. cb The callback to execute when the timer is expired.","title":"Parameters"},{"location":"api/reference/io_service-class/#return-value_2","text":"The shared_ptr of the high resolution timer.","title":"Return Value"},{"location":"api/reference/io_service-class/#example_9","text":"// Register a once timer, timeout is 3 seconds. yasio_shared_service () -> schedule ( std :: chrono :: seconds ( 3 ), []() -> bool { printf ( \"time called! \\n \" ); return true ; }); // Register a loop timer, interval is 5 seconds. auto loopTimer = yasio_shared_service () -> schedule ( std :: chrono :: seconds ( 5 ), []() -> bool { printf ( \"time called! \\n \" ); return false ; });","title":"Example"},{"location":"api/reference/io_service-class/#io_serviceinit_globals","text":"Explicit init global data with print function callback. static void init_globals ( print_fn2_t print_fn );","title":" io_service::init_globals"},{"location":"api/reference/io_service-class/#parameters_9","text":"print_fn The custom print function to print network service log.","title":"Parameters"},{"location":"api/reference/io_service-class/#remarks_7","text":"This function is optional, it's useful to redirect network service log to your custom log system, such as ue4,u3d, see the example.","title":"Remarks"},{"location":"api/reference/io_service-class/#example_10","text":"// yasio_uelua.cpp // compile with: /EHsc #include \"yasio_uelua.h\" #include \"yasio/platform/yasio_ue4.hpp\" #include \"lua.hpp\" #if defined(NS_SLUA) using namespace NS_SLUA ; #endif #include \"yasio/bindings/lyasio.cpp\" DECLARE_LOG_CATEGORY_EXTERN ( yasio_ue4 , Log , All ); DEFINE_LOG_CATEGORY ( yasio_ue4 ); void yasio_uelua_init ( void * L ) { auto Ls = ( lua_State * ) L ; print_fn2_t log_cb = []( int level , const char * msg ) { FString text ( msg ); const TCHAR * tstr = * text ; UE_LOG ( yasio_ue4 , Log , L \"%s\" , tstr ); }; io_service :: init_globals ( log_cb ); luaregister_yasio ( Ls ); } void yasio_uelua_cleanup () { io_service :: cleanup_globals (); }","title":"Example"},{"location":"api/reference/io_service-class/#io_servicecleanup_globals","text":"Clear custom print function object. static void cleanup_globals ();","title":" io_service::cleanup_globals"},{"location":"api/reference/io_service-class/#remarks_8","text":"You should call this function before unload a module(.dll,.so) which contains custom print function object.","title":"Remarks"},{"location":"api/reference/io_service-class/#io_servicechannel_at","text":"Retrieves channel by index. io_channel * channel_at ( size_t cindex ) const ;","title":" io_service::channel_at"},{"location":"api/reference/io_service-class/#parameters_10","text":"cindex The index of channel.","title":"Parameters"},{"location":"api/reference/io_service-class/#return-value_3","text":"The channel pointer, will be nullptr if the index out-of-range.","title":"Return value"},{"location":"api/reference/io_service-class/#io_serviceset_option","text":"Set current io_service option. void set_option ( int opt , ...);","title":" io_service::set_option"},{"location":"api/reference/io_service-class/#parameters_11","text":"opt The opt value, see YOPT_X_XXX .","title":"Parameters"},{"location":"api/reference/io_service-class/#example_11","text":"#include \"yasio/yasio.hpp\" int main (){ using namespace yasio ; using namespace yasio :: inet ; io_hostent hosts [] = { { \"192.168.1.66\" , 20336 }, { \"192.168.1.88\" , 20337 }, }; auto service = std :: make_shared < io_service > ( hosts , YASIO_ARRAYSIZE ( hosts )); // for application protocol with length field, you just needs set this option. // it's similar to java netty length frame based decode. // such as when your protocol define as following // packet.header: (header.len=12bytes) // code:int16_t // datalen:int32_t (not contains packet.header.len) // timestamp:int32_t // crc16:int16_t // packet.data service -> set_option ( YOPT_C_LFBFD_PARAMS , 0 , // channelIndex, the channel index 65535 , // maxFrameLength, max packet size 2 , // lenghtFieldOffset, the offset of length field 4 , // lengthFieldLength, the size of length field, can be 1,2,4 12 , // lengthAdjustment\uff1aif the value of length feild == packet.header.len + packet.data.len, this parameter should be 0, otherwise should be sizeof(packet.header) ); // for application protocol without length field, just sets length field size to -1. // then io_service will dispatch any packet received from server immediately, // such as http request, this is default behavior of channel. service -> set_option ( YOPT_C_LFBFD_PARAMS , 1 , 65535 , -1 , 0 , 0 ); return 0 ; }","title":"Example"},{"location":"api/reference/io_service-class/#see-also","text":"io_event Class io_channel Class io_service Options xxsocket Class obstream Class ibstream_view Class ibstream Class","title":"See also"},{"location":"api/reference/io_service-options/","text":"io_service options \u00b6 The following are the io_service options. Name Description YOPT_S_DEFER_EVENT_CB Set defer event callback params: callback:defer_event_cb_t remarks: a. User can do custom packet resolve at network thread, such as decompress and crc check. b. Return true, io_service will continue enque to event queue. c. Return false, io_service will drop the event. YOPT_S_DEFERRED_EVENT Set whether deferred dispatch event, default is: 1 params: deferred_event:int(1) YOPT_S_RESOLV_FN Set custom resolve function, native C++ ONLY params: func:resolv_fn_t* YOPT_S_PRINT_FN Set custom print function native C++ ONLY parmas: func:print_fn_t remarks: you must ensure thread safe of it YOPT_S_PRINT_FN2 Set custom print function with log level parmas: func:print_fn2_t you must ensure thread safe of it YOPT_S_EVENT_CB Set event callback params: func:event_cb_t* YOPT_S_TCP_KEEPALIVE Set tcp keepalive in seconds, probes is tries. params: idle:int(7200), interal:int(75), probes:int(10) YOPT_S_NO_NEW_THREAD Don't start a new thread to run event loop. params: value:int(0) YOPT_S_SSL_CACERT Sets ssl verification cert, if empty, don't verify. params: path:const char* YOPT_S_CONNECT_TIMEOUT Set connect timeout in seconds. params: connect_timeout:int(10) YOPT_S_DNS_CACHE_TIMEOUT Set dns cache timeout in seconds. params: dns_cache_timeout : int(600), YOPT_S_DNS_QUERIES_TIMEOUT Set dns queries timeout in seconds, default is: 5000. params: dns_queries_timeout : int(5000) remark: a. this option must be set before 'io_service::start' b. only works when have c-ares c. since v3.33.0 it's milliseconds, previous is seconds. d. the timeout algorithm of c-ares is complicated, usually, by default, dns queries will failed with timeout after more than 75 seconds. e. for more detail, please see: https://c-ares.haxx.se/ares_init_options.html YOPT_S_DNS_QUERIES_TRIES Set dns queries tries when timeout reached, default is: 5. params: dns_queries_tries : int(5) remarks: a. this option must be set before 'io_service::start' b. relative option: YOPT_S_DNS_QUERIES_TIMEOUT YOPT_S_DNS_DIRTY Set dns server dirty. params: reserved : int(1) remarks: a. this option only works with c-ares enabled b. you should set this option after your mobile network changed YOPT_C_LFBFD_FN Sets channel length field based frame decode function. params: index:int, func:decode_len_fn_t* remark: native C++ ONLY YOPT_C_LFBFD_PARAMS Sets channel length field based frame decode params. params: index:int, max_frame_length:int(10MBytes), length_field_offset:int(-1), length_field_length:int(4), length_adjustment:int(0), YOPT_C_LFBFD_IBTS Sets channel length field based frame decode initial bytes to strip. params:index:int,initial_bytes_to_strip:int(0) YOPT_C_REMOTE_HOST Sets channel remote host. params: index:int, ip:const char* YOPT_C_REMOTE_PORT Sets channel remote port. params: index:int, port:int YOPT_C_REMOTE_ENDPOINT Sets channel remote endpoint. params: index:int, ip:const char*, port:int YOPT_C_LOCAL_HOST Sets local host for client channel only. params: index:int, ip:const char* YOPT_C_LOCAL_PORT Sets local port for client channel only. params: index:int, port:int YOPT_C_LOCAL_ENDPOINT Sets local endpoint for client channel only. params: index:int, ip:const char*, port:int YOPT_C_MOD_FLAGS Mods channl flags. params: index:int, flagsToAdd:int, flagsToRemove:int YOPT_C_ENABLE_MCAST Enable channel multicast mode. params: index:int, multi_addr:const char*, loopback:int YOPT_C_DISABLE_MCAST Disable channel multicast mode. params: index:int YOPT_C_KCP_CONV The kcp conv id, must equal in two endpoint from the same connection. params: index:int, conv:int YOPT_T_CONNECT Change 4-tuple association for io_transport_udp. params: transport:transport_handle_t remark: only works for udp client transport YOPT_T_DISCONNECT Dissolve 4-tuple association for io_transport_udp. params: transport:transport_handle_t remark: only works for udp client transport YOPT_B_SOCKOPT Sets io_base sockopt. params: io_base*,level:int,optname:int,optval:int,optlen:int See also \u00b6 io_service Class","title":"io_service Options"},{"location":"api/reference/io_service-options/#io_service-options","text":"The following are the io_service options. Name Description YOPT_S_DEFER_EVENT_CB Set defer event callback params: callback:defer_event_cb_t remarks: a. User can do custom packet resolve at network thread, such as decompress and crc check. b. Return true, io_service will continue enque to event queue. c. Return false, io_service will drop the event. YOPT_S_DEFERRED_EVENT Set whether deferred dispatch event, default is: 1 params: deferred_event:int(1) YOPT_S_RESOLV_FN Set custom resolve function, native C++ ONLY params: func:resolv_fn_t* YOPT_S_PRINT_FN Set custom print function native C++ ONLY parmas: func:print_fn_t remarks: you must ensure thread safe of it YOPT_S_PRINT_FN2 Set custom print function with log level parmas: func:print_fn2_t you must ensure thread safe of it YOPT_S_EVENT_CB Set event callback params: func:event_cb_t* YOPT_S_TCP_KEEPALIVE Set tcp keepalive in seconds, probes is tries. params: idle:int(7200), interal:int(75), probes:int(10) YOPT_S_NO_NEW_THREAD Don't start a new thread to run event loop. params: value:int(0) YOPT_S_SSL_CACERT Sets ssl verification cert, if empty, don't verify. params: path:const char* YOPT_S_CONNECT_TIMEOUT Set connect timeout in seconds. params: connect_timeout:int(10) YOPT_S_DNS_CACHE_TIMEOUT Set dns cache timeout in seconds. params: dns_cache_timeout : int(600), YOPT_S_DNS_QUERIES_TIMEOUT Set dns queries timeout in seconds, default is: 5000. params: dns_queries_timeout : int(5000) remark: a. this option must be set before 'io_service::start' b. only works when have c-ares c. since v3.33.0 it's milliseconds, previous is seconds. d. the timeout algorithm of c-ares is complicated, usually, by default, dns queries will failed with timeout after more than 75 seconds. e. for more detail, please see: https://c-ares.haxx.se/ares_init_options.html YOPT_S_DNS_QUERIES_TRIES Set dns queries tries when timeout reached, default is: 5. params: dns_queries_tries : int(5) remarks: a. this option must be set before 'io_service::start' b. relative option: YOPT_S_DNS_QUERIES_TIMEOUT YOPT_S_DNS_DIRTY Set dns server dirty. params: reserved : int(1) remarks: a. this option only works with c-ares enabled b. you should set this option after your mobile network changed YOPT_C_LFBFD_FN Sets channel length field based frame decode function. params: index:int, func:decode_len_fn_t* remark: native C++ ONLY YOPT_C_LFBFD_PARAMS Sets channel length field based frame decode params. params: index:int, max_frame_length:int(10MBytes), length_field_offset:int(-1), length_field_length:int(4), length_adjustment:int(0), YOPT_C_LFBFD_IBTS Sets channel length field based frame decode initial bytes to strip. params:index:int,initial_bytes_to_strip:int(0) YOPT_C_REMOTE_HOST Sets channel remote host. params: index:int, ip:const char* YOPT_C_REMOTE_PORT Sets channel remote port. params: index:int, port:int YOPT_C_REMOTE_ENDPOINT Sets channel remote endpoint. params: index:int, ip:const char*, port:int YOPT_C_LOCAL_HOST Sets local host for client channel only. params: index:int, ip:const char* YOPT_C_LOCAL_PORT Sets local port for client channel only. params: index:int, port:int YOPT_C_LOCAL_ENDPOINT Sets local endpoint for client channel only. params: index:int, ip:const char*, port:int YOPT_C_MOD_FLAGS Mods channl flags. params: index:int, flagsToAdd:int, flagsToRemove:int YOPT_C_ENABLE_MCAST Enable channel multicast mode. params: index:int, multi_addr:const char*, loopback:int YOPT_C_DISABLE_MCAST Disable channel multicast mode. params: index:int YOPT_C_KCP_CONV The kcp conv id, must equal in two endpoint from the same connection. params: index:int, conv:int YOPT_T_CONNECT Change 4-tuple association for io_transport_udp. params: transport:transport_handle_t remark: only works for udp client transport YOPT_T_DISCONNECT Dissolve 4-tuple association for io_transport_udp. params: transport:transport_handle_t remark: only works for udp client transport YOPT_B_SOCKOPT Sets io_base sockopt. params: io_base*,level:int,optname:int,optval:int,optlen:int","title":"io_service options"},{"location":"api/reference/io_service-options/#see-also","text":"io_service Class","title":"See also"},{"location":"api/reference/obstream-class/","text":"obstream Class \u00b6 Provides the functionality of Binary Writer. Syntax \u00b6 namespace yasio { using obstream = basic_obstream < endian :: network_convert_tag > ; // The fast binary writer without byte order convertion. using fast_obstream = basic_obstream < endian :: host_convert_tag > ; } Members \u00b6 Public Constructors \u00b6 Name Description obstream::obstream Constructs a obstream object. Public Methods \u00b6 Name Description obstream::write Function template, write number value. obstream::write_ix Function template, write 7bit Encoded Int/Int64 . obstream::write_v Write blob data with 7bit Encoded Int lenght field . obstream::write_byte Write 1 byte. obstream::write_bytes Write blob data without length field. obstream::empty Check is stream empty. obstream::data Retrieves stream data pointer. obstream::length Retrieves size of stream. obstream::buffer Retrieves the buffer object of the stream. obstream::save Save the stream binary data to file. Remarks \u00b6 When write int16~int64 and float/double, will auto convert host byte order to network byte order. Requirements \u00b6 Header: obstream.hpp obstream::obstream \u00b6 Constructs a obstream object. obstream ( size_t capacity = 128 ); obstream ( const obstream & rhs ); obstream ( obstream && rhs ); Example \u00b6 TODO: obstream::write \u00b6 Write number value to stream with byte order convertion. template < typename _Nty > void obstream :: write ( _Nty value ); Parameters \u00b6 value The value to be written. Remarks \u00b6 The type _Nty of value could be any (1~8bytes) integral or float types Example \u00b6 TODO: obstream::write_ix \u00b6 Write 7Bit Encoded Int compressed value. template < typename _Intty > void obstream :: write_ix ( _Intty value ); Parameters \u00b6 value The value to be written. Remarks \u00b6 The type _Intty of value must be one of follows int32_t int64_t This function behavior is compatible with dotnet BinaryWriter.Write7BitEncodedInt BinaryWriter.Write7BitEncodedInt64 Example \u00b6 TODO: obstream::write_v \u00b6 Write blob data with 7Bit Encoded Int length field. void write_v ( cxx17 :: string_view sv ); Parameters \u00b6 sv The string_view value to be written. Remarks \u00b6 This function will write length field with 7Bit Encoded first, then call write_bytes to write the value. Example \u00b6 TODO: obstream::write_byte \u00b6 Write 1 byte to stream. void write_byte ( uint8_t value ); Parameters \u00b6 value The value to be written. Remarks \u00b6 This function is identical to obstream::write Example \u00b6 TODO: obstream::write_bytes \u00b6 Write byte array to stream. void write_bytes ( cxx17 :: string_view sv ); void write_bytes ( const void * data , int length ); void write_bytes ( std :: streamoff offset , const void * data , int length ); Parameters \u00b6 sv The string_view value to be written. data The data to be written. length The length data to be written. offset The offset of stream to be written. Remarks \u00b6 The value of offset + length must be less than obstream::length Example \u00b6 TODO: obstream::empty \u00b6 Tests whether the obstream is empty. bool empty () const ; Return Value \u00b6 true if the obstream empty; false if it has at least one byte. Remarks \u00b6 The member function is equivalent to length == 0. Example \u00b6 TODO: obstream::data \u00b6 Retrieves stream data pointer. const char * data () const ; char * data (); Return Value \u00b6 A pointer to the first byte in the stream. Example \u00b6 TODO: obstream::length \u00b6 Returns the number of bytes in the stream. size_t length () const ; Return Value \u00b6 The current length of the stream. Example \u00b6 TODO: obstream::buffer \u00b6 Retrieves internal buffer of stream. const std :: vector < char >& buffer () const ; std :: vector < char >& buffer (); Return Value \u00b6 The internal implementation buffer of the stream. Example \u00b6 // obstream_buffer.cpp // compile with: /EHsc #include \"yasio/obstream.hpp\" int main ( ) { using namespace yasio ; using namespace cxx17 ; obstream obs ; obs . write_v ( \"hello world!\" ); const auto & const_buffer = obs . buffer (); // after this line, the obs will be empty auto move_buffer = std :: move ( obs . buffer ()); return 0 ; } obstream::save \u00b6 Save the stream data to file. void save ( const char * filename ) const ; Example \u00b6 // obstream_save.cpp // compile with: /EHsc #include \"yasio/obstream.hpp\" #include \"yasio/ibstream.hpp\" int main ( ) { using namespace yasio ; using namespace cxx17 ; obstream obs ; obs . write_v ( \"hello world!\" ); obs . save ( \"obstream_save.bin\" ); ibstream ibs ; if ( ibs . load ( \"obstream_save.bin\" )) { // output should be: hello world! try { std :: count << ibs . read_v () << \" \\n \" ; } catch ( const std :: exception & ex ) { std :: count << \"read_v fail: \" << << ex . message () << \" \\n \" ; } } return 0 ; } See also \u00b6 ibstream_view Class ibstream Class","title":"obstream Class"},{"location":"api/reference/obstream-class/#obstream-class","text":"Provides the functionality of Binary Writer.","title":"obstream Class"},{"location":"api/reference/obstream-class/#syntax","text":"namespace yasio { using obstream = basic_obstream < endian :: network_convert_tag > ; // The fast binary writer without byte order convertion. using fast_obstream = basic_obstream < endian :: host_convert_tag > ; }","title":"Syntax"},{"location":"api/reference/obstream-class/#members","text":"","title":"Members"},{"location":"api/reference/obstream-class/#public-constructors","text":"Name Description obstream::obstream Constructs a obstream object.","title":"Public Constructors"},{"location":"api/reference/obstream-class/#public-methods","text":"Name Description obstream::write Function template, write number value. obstream::write_ix Function template, write 7bit Encoded Int/Int64 . obstream::write_v Write blob data with 7bit Encoded Int lenght field . obstream::write_byte Write 1 byte. obstream::write_bytes Write blob data without length field. obstream::empty Check is stream empty. obstream::data Retrieves stream data pointer. obstream::length Retrieves size of stream. obstream::buffer Retrieves the buffer object of the stream. obstream::save Save the stream binary data to file.","title":"Public Methods"},{"location":"api/reference/obstream-class/#remarks","text":"When write int16~int64 and float/double, will auto convert host byte order to network byte order.","title":"Remarks"},{"location":"api/reference/obstream-class/#requirements","text":"Header: obstream.hpp","title":"Requirements"},{"location":"api/reference/obstream-class/#obstreamobstream","text":"Constructs a obstream object. obstream ( size_t capacity = 128 ); obstream ( const obstream & rhs ); obstream ( obstream && rhs );","title":" obstream::obstream"},{"location":"api/reference/obstream-class/#example","text":"TODO:","title":"Example"},{"location":"api/reference/obstream-class/#obstreamwrite","text":"Write number value to stream with byte order convertion. template < typename _Nty > void obstream :: write ( _Nty value );","title":" obstream::write"},{"location":"api/reference/obstream-class/#parameters","text":"value The value to be written.","title":"Parameters"},{"location":"api/reference/obstream-class/#remarks_1","text":"The type _Nty of value could be any (1~8bytes) integral or float types","title":"Remarks"},{"location":"api/reference/obstream-class/#example_1","text":"TODO:","title":"Example"},{"location":"api/reference/obstream-class/#obstreamwrite_ix","text":"Write 7Bit Encoded Int compressed value. template < typename _Intty > void obstream :: write_ix ( _Intty value );","title":" obstream::write_ix"},{"location":"api/reference/obstream-class/#parameters_1","text":"value The value to be written.","title":"Parameters"},{"location":"api/reference/obstream-class/#remarks_2","text":"The type _Intty of value must be one of follows int32_t int64_t This function behavior is compatible with dotnet BinaryWriter.Write7BitEncodedInt BinaryWriter.Write7BitEncodedInt64","title":"Remarks"},{"location":"api/reference/obstream-class/#example_2","text":"TODO:","title":"Example"},{"location":"api/reference/obstream-class/#obstreamwrite_v","text":"Write blob data with 7Bit Encoded Int length field. void write_v ( cxx17 :: string_view sv );","title":" obstream::write_v"},{"location":"api/reference/obstream-class/#parameters_2","text":"sv The string_view value to be written.","title":"Parameters"},{"location":"api/reference/obstream-class/#remarks_3","text":"This function will write length field with 7Bit Encoded first, then call write_bytes to write the value.","title":"Remarks"},{"location":"api/reference/obstream-class/#example_3","text":"TODO:","title":"Example"},{"location":"api/reference/obstream-class/#obstreamwrite_byte","text":"Write 1 byte to stream. void write_byte ( uint8_t value );","title":" obstream::write_byte"},{"location":"api/reference/obstream-class/#parameters_3","text":"value The value to be written.","title":"Parameters"},{"location":"api/reference/obstream-class/#remarks_4","text":"This function is identical to obstream::write","title":"Remarks"},{"location":"api/reference/obstream-class/#example_4","text":"TODO:","title":"Example"},{"location":"api/reference/obstream-class/#obstreamwrite_bytes","text":"Write byte array to stream. void write_bytes ( cxx17 :: string_view sv ); void write_bytes ( const void * data , int length ); void write_bytes ( std :: streamoff offset , const void * data , int length );","title":" obstream::write_bytes"},{"location":"api/reference/obstream-class/#parameters_4","text":"sv The string_view value to be written. data The data to be written. length The length data to be written. offset The offset of stream to be written.","title":"Parameters"},{"location":"api/reference/obstream-class/#remarks_5","text":"The value of offset + length must be less than obstream::length","title":"Remarks"},{"location":"api/reference/obstream-class/#example_5","text":"TODO:","title":"Example"},{"location":"api/reference/obstream-class/#obstreamempty","text":"Tests whether the obstream is empty. bool empty () const ;","title":" obstream::empty"},{"location":"api/reference/obstream-class/#return-value","text":"true if the obstream empty; false if it has at least one byte.","title":"Return Value"},{"location":"api/reference/obstream-class/#remarks_6","text":"The member function is equivalent to length == 0.","title":"Remarks"},{"location":"api/reference/obstream-class/#example_6","text":"TODO:","title":"Example"},{"location":"api/reference/obstream-class/#obstreamdata","text":"Retrieves stream data pointer. const char * data () const ; char * data ();","title":" obstream::data"},{"location":"api/reference/obstream-class/#return-value_1","text":"A pointer to the first byte in the stream.","title":"Return Value"},{"location":"api/reference/obstream-class/#example_7","text":"TODO:","title":"Example"},{"location":"api/reference/obstream-class/#obstreamlength","text":"Returns the number of bytes in the stream. size_t length () const ;","title":" obstream::length"},{"location":"api/reference/obstream-class/#return-value_2","text":"The current length of the stream.","title":"Return Value"},{"location":"api/reference/obstream-class/#example_8","text":"TODO:","title":"Example"},{"location":"api/reference/obstream-class/#obstreambuffer","text":"Retrieves internal buffer of stream. const std :: vector < char >& buffer () const ; std :: vector < char >& buffer ();","title":" obstream::buffer"},{"location":"api/reference/obstream-class/#return-value_3","text":"The internal implementation buffer of the stream.","title":"Return Value"},{"location":"api/reference/obstream-class/#example_9","text":"// obstream_buffer.cpp // compile with: /EHsc #include \"yasio/obstream.hpp\" int main ( ) { using namespace yasio ; using namespace cxx17 ; obstream obs ; obs . write_v ( \"hello world!\" ); const auto & const_buffer = obs . buffer (); // after this line, the obs will be empty auto move_buffer = std :: move ( obs . buffer ()); return 0 ; }","title":"Example"},{"location":"api/reference/obstream-class/#obstreamsave","text":"Save the stream data to file. void save ( const char * filename ) const ;","title":" obstream::save"},{"location":"api/reference/obstream-class/#example_10","text":"// obstream_save.cpp // compile with: /EHsc #include \"yasio/obstream.hpp\" #include \"yasio/ibstream.hpp\" int main ( ) { using namespace yasio ; using namespace cxx17 ; obstream obs ; obs . write_v ( \"hello world!\" ); obs . save ( \"obstream_save.bin\" ); ibstream ibs ; if ( ibs . load ( \"obstream_save.bin\" )) { // output should be: hello world! try { std :: count << ibs . read_v () << \" \\n \" ; } catch ( const std :: exception & ex ) { std :: count << \"read_v fail: \" << << ex . message () << \" \\n \" ; } } return 0 ; }","title":"Example"},{"location":"api/reference/obstream-class/#see-also","text":"ibstream_view Class ibstream Class","title":"See also"},{"location":"api/reference/xxsocket-class/","text":"xxsocket Class \u00b6 Provides the functionality of low-level socket based on POSIX socket APIs, support std::move Syntax \u00b6 namespace yasio { namespace inet { class xxsocket ; } } Members \u00b6 Name Description xxsocket::xxsocket Constructs a xxsocket object. Public Methods \u00b6 Name Description xxsocket::xpconnect Cnnect remote via tcp. xxsocket::xpconnect_n Connect remote via tcp non-blocking. xxsocket::pconnect Connect remote via tcp. xxsocket::pconnect_n Connect remote via tcp non-blocking. xxsocket::pserve Create socket as tcp server. xxsocket::swap Swap socket handle. xxsocket::open Open a socket. xxsocket::reopen Reopen a socket. xxsocket::is_open Check whether socket opened. xxsocket::native_handle Gets socket handle. xxsocket::release_handle Release ownership of socket handle. xxsocket::set_nonblocking Sets socket non-blocking mode. xxsocket::test_nonblocking Test whether socket is non-blocking mode. xxsocket::bind Bind socket with specific address. xxsocket::bind_any Bind socket with any address. xxsocket::listen Listen a tcp socket. xxsocket::accept Accept a tcp socket. xxsocket::accept_n Accept a tcp socket non-blocking. xxsocket::connect Connect a socket. xxsocket::connect_n Connect a socket non-blocking. xxsocket::send Send data on the socket. xxsocket::send_n Send data on the socket non-blocking. xxsocket::recv Receive data from the socket. xxsocket::recv_n Receive data from the socket non-blocking. xxsocket::sendto Send data to a DGRAM socket. xxsocket::recvfrom Send data to a DGRAM socket non-blocking. xxsocket::handle_write_ready Wait socket ready to write. xxsocket::handle_read_ready Wait socket ready to read. xxsocket::local_endpoint Gets local endpoint of socket. xxsocket::peer_endpoint Gets peer endpoint of socket. xxsocket::set_keepalive Sets tcp socket keepalive. xxsocket::reuse_address Sets socket reuse address. xxsocket::exclusive_address Sets socket exclusive address. xxsocket::select Select event ready for socket. xxsocket::shutdown Shutdown socket. xxsocket::close Close socket. xxsocket::tcp_rtt Gets tcp socket rtt. xxsocket::get_last_errno Gets last socket error. xxsocket::set_last_errno Sets last socket error. xxsocket::strerror Translate socket error code to string. xxsocket::gai_strerror Translate getaddrinfo error code to string. xxsocket::resolve Resolve domain. xxsocket::resolve_v4 Resolve domain ipv4 address. xxsocket::resolve_v6 Resolve domain ipv6 address. xxsocket::resolve_v4to6 Resolve ipv4 address and convert to ipv6 V4MAPPED format. xxsocket::resolve_tov6 Resolve all address, convert ipv4 address to ipv6 V4MAPPED format. xxsocket::getipsv Get local supported ip stack flags. xxsocket::traverse_local_address Traverse local address. See also \u00b6 io_service Class","title":"xxsocket Class"},{"location":"api/reference/xxsocket-class/#xxsocket-class","text":"Provides the functionality of low-level socket based on POSIX socket APIs, support std::move","title":"xxsocket Class"},{"location":"api/reference/xxsocket-class/#syntax","text":"namespace yasio { namespace inet { class xxsocket ; } }","title":"Syntax"},{"location":"api/reference/xxsocket-class/#members","text":"Name Description xxsocket::xxsocket Constructs a xxsocket object.","title":"Members"},{"location":"api/reference/xxsocket-class/#public-methods","text":"Name Description xxsocket::xpconnect Cnnect remote via tcp. xxsocket::xpconnect_n Connect remote via tcp non-blocking. xxsocket::pconnect Connect remote via tcp. xxsocket::pconnect_n Connect remote via tcp non-blocking. xxsocket::pserve Create socket as tcp server. xxsocket::swap Swap socket handle. xxsocket::open Open a socket. xxsocket::reopen Reopen a socket. xxsocket::is_open Check whether socket opened. xxsocket::native_handle Gets socket handle. xxsocket::release_handle Release ownership of socket handle. xxsocket::set_nonblocking Sets socket non-blocking mode. xxsocket::test_nonblocking Test whether socket is non-blocking mode. xxsocket::bind Bind socket with specific address. xxsocket::bind_any Bind socket with any address. xxsocket::listen Listen a tcp socket. xxsocket::accept Accept a tcp socket. xxsocket::accept_n Accept a tcp socket non-blocking. xxsocket::connect Connect a socket. xxsocket::connect_n Connect a socket non-blocking. xxsocket::send Send data on the socket. xxsocket::send_n Send data on the socket non-blocking. xxsocket::recv Receive data from the socket. xxsocket::recv_n Receive data from the socket non-blocking. xxsocket::sendto Send data to a DGRAM socket. xxsocket::recvfrom Send data to a DGRAM socket non-blocking. xxsocket::handle_write_ready Wait socket ready to write. xxsocket::handle_read_ready Wait socket ready to read. xxsocket::local_endpoint Gets local endpoint of socket. xxsocket::peer_endpoint Gets peer endpoint of socket. xxsocket::set_keepalive Sets tcp socket keepalive. xxsocket::reuse_address Sets socket reuse address. xxsocket::exclusive_address Sets socket exclusive address. xxsocket::select Select event ready for socket. xxsocket::shutdown Shutdown socket. xxsocket::close Close socket. xxsocket::tcp_rtt Gets tcp socket rtt. xxsocket::get_last_errno Gets last socket error. xxsocket::set_last_errno Sets last socket error. xxsocket::strerror Translate socket error code to string. xxsocket::gai_strerror Translate getaddrinfo error code to string. xxsocket::resolve Resolve domain. xxsocket::resolve_v4 Resolve domain ipv4 address. xxsocket::resolve_v6 Resolve domain ipv6 address. xxsocket::resolve_v4to6 Resolve ipv4 address and convert to ipv6 V4MAPPED format. xxsocket::resolve_tov6 Resolve all address, convert ipv4 address to ipv6 V4MAPPED format. xxsocket::getipsv Get local supported ip stack flags. xxsocket::traverse_local_address Traverse local address.","title":"Public Methods"},{"location":"api/reference/xxsocket-class/#see-also","text":"io_service Class","title":"See also"}]}