{"config":{"lang":["en","ja"],"separator":"[\\s\\-\\\uff0c\\\u3002]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"yasio Documentation","text":"<p>yasio is a multi-platform support c++11 library with focus on asio (asynchronous socket I/O) for any client application.</p> <ul> <li> <p>Cross-platform:</p> <ul> <li> <p>Compiler: </p> <ul> <li>Visual Studio 2013+</li> <li>GCC4.7+</li> <li>xcode9+</li> <li>Other Compilers which support C++11+</li> </ul> </li> <li> <p>Architecture: x86, x64, ARM and etc.</p> </li> <li>OS: Windows, macOS, Linux, FreeBSD, iOS, Android And etc.</li> </ul> </li> <li> <p>Open source location: \u4e2d\u56fd@\u6df1\u5733</p> </li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>This demo simply send http request to <code>tool.chinaz.com</code> and print resposne data.</p> C++ <pre><code>#include \"yasio/yasio.hpp\"\n#include \"yasio/obstream.hpp\"\nusing namespace yasio;\nusing namespace yasio::inet;\nint main()\n{\n    io_service service({\"tool.chinaz.com\", 80});\n    service.set_option(YOPT_S_DEFERRED_EVENT, 0); // dispatch network event on network thread\n    service.start([&amp;](event_ptr&amp;&amp; ev) {\n        switch (ev-&gt;kind())\n        {\n        case YEK_ON_PACKET: {\n            auto packet = std::move(ev-&gt;packet());\n            fwrite(packet.data(), packet.size(), 1, stdout);\n            fflush(stdout);\n            break;\n        }\n        case YEK_ON_OPEN:\n            if (ev-&gt;status() == 0)\n            {\n                auto transport = ev-&gt;transport();\n                if (ev-&gt;cindex() == 0)\n                {\n                    obstream obs;\n                    obs.write_bytes(\"GET /index.htm HTTP/1.1\\r\\n\");\n\n                    obs.write_bytes(\"Host: tool.chinaz.com\\r\\n\");\n\n                    obs.write_bytes(\"User-Agent: Mozilla/5.0 (Windows NT 10.0; \"\n                                    \"WOW64) AppleWebKit/537.36 (KHTML, like Gecko) \"\n                                    \"Chrome/87.0.4820.88 Safari/537.36\\r\\n\");\n                    obs.write_bytes(\"Accept: */*;q=0.8\\r\\n\");\n                    obs.write_bytes(\"Connection: Close\\r\\n\\r\\n\");\n\n                    service.write(transport, std::move(obs.buffer()));\n                }\n            }\n            break;\n        case YEK_ON_CLOSE:\n            printf(\"The connection is lost.\\n\");\n            break;\n        }\n    });\n    // open channel 0 as tcp client\n    service.open(0, YCK_TCP_CLIENT);\n    getchar();\n}\n</code></pre> Lua <pre><code>local ip138 = \"tool.chinaz.com\"\nlocal service = yasio.io_service.new({host=ip138, port=80})\nlocal respdata = \"\"\nservice:start(function(ev)\n        local k = ev.kind()\n        if (k == yasio.YEK_ON_PACKET) then\n            respdata = respdata .. ev:packet():to_string()\n        elseif k == yasio.YEK_ON_OPEN then\n            if ev:status() == 0 then -- connect succeed\n                local transport = ev:transport()\n                local obs = yasio.obstream.new()\n                obs:write_bytes(\"GET / HTTP/1.1\\r\\n\")\n\n                obs:write_bytes(\"Host: \" .. ip138 .. \"\\r\\n\")\n\n                obs:write_bytes(\"User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36\\r\\n\")\n                obs:write_bytes(\"Accept: */*;q=0.8\\r\\n\")\n                obs:write_bytes(\"Connection: Close\\r\\n\\r\\n\")\n\n                service:write(transport, obs)\n            end\n        elseif k == yasio.YEK_ON_CLOSE then\n            print(\"request finish, respdata: \" ..  respdata)\n        end\n    end)\n-- Open channel 0 as tcp client and start non-blocking tcp 3 times handshake\nservice:open(0, yasio.YCK_TCP_CLIENT)\n\n-- Call this function at thread which focus on the network event.\nfunction gDispatchNetworkEvent(...)\n    service:dispatch(128) -- dispatch max events is 128 per frame\nend\n\n_G.yservice = service -- Store service to global table as a singleton instance\n</code></pre>"},{"location":"#the-tests-examples","title":"The tests &amp; examples","text":"<ul> <li> <p>tests:</p> <ul> <li>echo_server: TCP/UDP/KCP echo server</li> <li>echo_client: TCP/UDP/KCP echo client</li> <li>ssltest: SSL client test, Get github.com home page</li> <li>tcptest: TCP test</li> <li>speedtest: TCP,UDP,KCP local transfer</li> <li>mcast: multi-cast test program</li> </ul> </li> <li> <p>examples:</p> <ul> <li>ftp_server: A simple ftp server only support file download which is based on yasio\uff0cclick to visit.</li> <li>lua: lua test contains http request\uff0cTCP unpack test code.</li> <li>xlua: Unity3D xlua Integration Demo.</li> <li>DemoUE4: Unreal Engine 4 Integration Demo.</li> </ul> </li> </ul>"},{"location":"#build-tests-examples","title":"Build tests &amp; examples","text":"<ul> <li>Ensure install compiler which support C++11, such as <code>msvc</code>, <code>gcc</code>, <code>clang</code></li> <li>Ensure <code>git</code>, <code>cmake</code> installed</li> <li>Execute follow commands:</li> </ul> <pre><code>  git clone https://github.com/yasio/yasio\n  cd yasio\n  git submodule update --init --recursive \n  cd build\n  # for xcode should be: cmake .. -GXcode\n  cmake ..\n  cmake --build . --config Debug\n</code></pre>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#faq","title":"FAQ","text":"Can't load xlua bundle on macOS? <p>The file <code>xlua.bundle</code> needs change attr by command <code>sudo xattr -r -d com.apple.quarantine xlua.bundle</code> </p>"},{"location":"preprocessor/","title":"yasio Macros","text":"<p>The macros listed in the table below may be used to control the interface, functionality, and behaviour of <code>yasio</code>. You can define them at yasio/detail/config.hpp or compiler preprocessors.</p> Name Description YASIO_HAVE_KCP Whether enable kcp, default: <code>off</code> YASIO_HEADER_ONLY Whether enable header only, default: <code>off</code> YASIO_SSL_BACKEND Choose ssl backend, since 3.36.0 <code>1</code>. Use OpenSSL<code>2</code>. Use mbedtls YASIO_ENABLE_UDS Whether enable unix domain socket support, current only unix-like system and win10 RS5 support this feature, default: <code>off</code> YASIO_HAVE_CARES Whether use c-ares to resolve domain name, default: <code>off</code> YASIO_VERBOSE_LOG Whether enable verbose log, default: <code>off</code> YASIO_NT_COMPAT_GAI Whether enable windows xp <code>getaddrinfo</code> API compatible, default: <code>off</code> YASIO_USE_SPSC_QUEUE Whether use SPSC queue, default: <code>off</code> YASIO_HAVE_HALF_FLOAT Whether enable half float, depends on half.hpp YASIO_DISABLE_OBJECT_POOL Whether disable object pool YASIO_DISABLE_CONCURRENT_SINGLETON Whether disable concurrent singleton"},{"location":"api/reference/ibstream-class/","title":"ibstream_view Class","text":"<p>Provides the functionality of Binary Reader.</p>"},{"location":"api/reference/ibstream-class/#syntax","title":"Syntax","text":"<pre><code>namespace yasio { \nusing ibstream_view = basic_ibstream_view&lt;endian::network_convert_tag&gt;; \nusing fast_ibstream_view = basic_ibstream_view&lt;endian::host_convert_tag&gt;;\n}\n</code></pre>"},{"location":"api/reference/ibstream-class/#members","title":"Members","text":""},{"location":"api/reference/ibstream-class/#public-constructors","title":"Public Constructors","text":"Name Description ibstream_view::ibstream_view Constructs a <code>ibstream_view</code> object."},{"location":"api/reference/ibstream-class/#public-methods","title":"Public Methods","text":"Name Description ibstream_view::reset Reset input data, weak reference. ibstream_view::read Function template, read number value. ibstream_view:read_ix Function template,read 7bit Encoded Int/Int64. ibstream_view:read_v Read blob data with 7bit Encoded Int/Int64 lenght field. ibstream_view:read_byte Read 1 byte. ibstream_view:read_bytes Read blob data without length field. ibstream_view::empty Check is stream empty. ibstream_view::data Retrieves stream data pointer. ibstream_view::length Retrieves size of stream. ibstream_view::seek Moves the read position in a stream."},{"location":"api/reference/ibstream-class/#remarks","title":"Remarks","text":"<p>This class is inspired from C++17 std::string_view, it never copy any buffer during initialize and read.</p>"},{"location":"api/reference/ibstream-class/#requirements","title":"Requirements","text":"<p>Header: ibstream.hpp</p>"},{"location":"api/reference/ibstream-class/#ibstream_viewibstream_view","title":"ibstream_view::ibstream_view","text":"<p>Constructs a <code>ibstream_view</code> object.</p> <pre><code>ibstream_view();\n\nibstream_view(const void* data, size_t size);\n\nibstream_view(const obstream* obs);\n</code></pre>"},{"location":"api/reference/ibstream-class/#parameters","title":"Parameters","text":"<p>data The pointer to first byte of buffer.</p> <p>size The size of data.</p> <p>obs The obstream object.</p>"},{"location":"api/reference/ibstream-class/#example","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/ibstream-class/#ibstream_viewreset","title":"ibstream_view::reset","text":"<p>Resets <code>ibstream_view</code> input buffer view.</p> <pre><code>void ibstream_view::reset(const void* data, size_t size);\n</code></pre>"},{"location":"api/reference/ibstream-class/#parameters_1","title":"Parameters","text":"<p>data The pointer to first byte of buffer.</p> <p>size The size of data.</p>"},{"location":"api/reference/ibstream-class/#ibstream_viewread","title":"ibstream_view::read","text":"<p>Read number value from stream with byte order convertion.</p> <pre><code>template&lt;typename _Nty&gt;\n_Nty ibstream_view::read();\n</code></pre>"},{"location":"api/reference/ibstream-class/#return-value","title":"Return Value","text":"<p>Returns the value to be read.</p>"},{"location":"api/reference/ibstream-class/#remarks_1","title":"Remarks","text":"<p>The type _Nty of value could be any (1~8bytes) integral or float types.</p>"},{"location":"api/reference/ibstream-class/#example_1","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/ibstream-class/#ibstream_viewread_ix","title":"ibstream_view::read_ix","text":"<p>Read 7Bit Encoded Int compressed value.</p> <pre><code>template&lt;typename _Intty&gt;\n_Intty ibstream_view::read_ix();\n</code></pre>"},{"location":"api/reference/ibstream-class/#return-value_1","title":"Return Value","text":"<p>Returns the value to be read.</p>"},{"location":"api/reference/ibstream-class/#remarks_2","title":"Remarks","text":"<p>The type _Intty of value must be one of follows</p> <ul> <li>int32_t</li> <li>int64_t</li> </ul> <p>This function behavior is compatible with dotnet</p> <ul> <li>BinaryReader.Read7BitEncodedInt()</li> <li>BinaryReader.Read7BitEncodedInt64()</li> </ul>"},{"location":"api/reference/ibstream-class/#example_2","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/ibstream-class/#ibstream_viewread_v","title":"ibstream_view::read_v","text":"<p>Read blob data with 7Bit Encoded Int length field.</p> <pre><code>cxx17::string_view read_v();\n</code></pre>"},{"location":"api/reference/ibstream-class/#return-value_2","title":"Return Value","text":"<p>Returns the blob view to be read</p>"},{"location":"api/reference/ibstream-class/#remarks_3","title":"Remarks","text":"<p>This function will read length field with 7Bit Encoded first, then call read_bytes to read the value.</p>"},{"location":"api/reference/ibstream-class/#example_3","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/ibstream-class/#ibstream_viewread_byte","title":"ibstream_view::read_byte","text":"<p>Read 1 byte from stream.</p> <pre><code>uint8_t read_byte();\n</code></pre>"},{"location":"api/reference/ibstream-class/#return-value_3","title":"Return Value","text":"<p>Returns the value to be read.</p>"},{"location":"api/reference/ibstream-class/#remarks_4","title":"Remarks","text":"<p>This function is identical to ibstream_view::read"},{"location":"api/reference/ibstream-class/#example_4","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/ibstream-class/#ibstream_viewread_bytes","title":"ibstream_view::read_bytes","text":"<p>Read byte array from stream.</p> <pre><code>cxx17::string_view read_bytes();\n</code></pre>"},{"location":"api/reference/ibstream-class/#return-value_4","title":"Return Value","text":"<p>The blob view to be read.</p>"},{"location":"api/reference/ibstream-class/#example_5","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/ibstream-class/#ibstream_viewempty","title":"ibstream_view::empty","text":"<p>Tests whether the ibstream_view is empty.</p> <pre><code>bool empty() const;\n</code></pre>"},{"location":"api/reference/ibstream-class/#return-value_5","title":"Return Value","text":"<p><code>true</code> if the ibstream_view empty; <code>false</code> if it has at least one byte.</p>"},{"location":"api/reference/ibstream-class/#remarks_5","title":"Remarks","text":"<p>The member function is equivalent to length == 0.</p>"},{"location":"api/reference/ibstream-class/#example_6","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/ibstream-class/#ibstream_viewdata","title":"ibstream_view::data","text":"<p>Retrieves stream data pointer.</p> <pre><code>const char* data() const;\n</code></pre>"},{"location":"api/reference/ibstream-class/#return-value_6","title":"Return Value","text":"<p>A pointer to the first byte in the stream.</p>"},{"location":"api/reference/ibstream-class/#example_7","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/ibstream-class/#ibstream_viewlength","title":"ibstream_view::length","text":"<p>Returns the number of bytes in the stream.</p> <pre><code>size_t length() const;\n</code></pre>"},{"location":"api/reference/ibstream-class/#return-value_7","title":"Return Value","text":"<p>The current length of the stream.</p>"},{"location":"api/reference/ibstream-class/#example_8","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/ibstream-class/#ibstream_viewseek","title":"ibstream_view::seek","text":"<p>Moves the read position in a stream.</p> <pre><code>ptrdiff_t seek(ptrdiff_t offset, int whence);\n</code></pre>"},{"location":"api/reference/ibstream-class/#parameters_2","title":"Parameters","text":"<p>offset\\ An offset to move the read pointer relative to whence.</p> <p>whence\\ One of the <code>SEEK_SET</code>,<code>SEEK_CUR</code>,<code>SEEK_END</code> enumerations.</p>"},{"location":"api/reference/ibstream-class/#return-value_8","title":"Return Value","text":"<p>The current read poistion of the stream after seek.</p>"},{"location":"api/reference/ibstream-class/#example_9","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/ibstream-class/#ibstream-class","title":"ibstream Class","text":"<p>Provides the functionality of Binary Reader with buffer storage.</p>"},{"location":"api/reference/ibstream-class/#syntax_1","title":"Syntax","text":"<pre><code>namespace yasio { \nusing ibstream = basic_ibstream&lt;endian::network_convert_tag&gt;; \nusing fast_ibstream = basic_ibstream&lt;endian::host_convert_tag&gt;; \n}\n</code></pre>"},{"location":"api/reference/ibstream-class/#members_1","title":"Members","text":""},{"location":"api/reference/ibstream-class/#public-constructors_1","title":"Public Constructors","text":"Name Description ibstream::ibstream Constructs a <code>ibstream</code> object."},{"location":"api/reference/ibstream-class/#public-methods_1","title":"Public Methods","text":"Name Description ibstream::load Load stream from file."},{"location":"api/reference/ibstream-class/#inheritance-hierarchy","title":"Inheritance Hierarchy","text":"<p>ibstream_view</p> <p><code>ibstream</code></p>"},{"location":"api/reference/ibstream-class/#ibstreamibstream","title":"ibstream::ibstream","text":"<p>Constructs a <code>ibstream</code> object.</p> <pre><code>ibstream(std::vector&lt;char&gt; blob);\n\nibstream(const obstream* obs);\n</code></pre>"},{"location":"api/reference/ibstream-class/#parameters_3","title":"Parameters","text":"<p>blob The input binary buffer.</p> <p>obs The obstream object.</p>"},{"location":"api/reference/ibstream-class/#example_10","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/ibstream-class/#ibstreamload","title":"ibstream::load","text":"<p>Load the stream data from file.</p> <pre><code>bool load(const char* filename) const;\n</code></pre>"},{"location":"api/reference/ibstream-class/#return-value_9","title":"Return Value","text":"<p><code>true</code> succed, <code>false</code> fail.</p>"},{"location":"api/reference/ibstream-class/#example_11","title":"Example","text":"<p>See: obstream::save</p>"},{"location":"api/reference/ibstream-class/#see-also","title":"See also","text":"<p>obstream Class</p> <p>io_service Class</p>"},{"location":"api/reference/io_channel-class/","title":"io_channel Class","text":"<p>Provides the functionality of establishing tcp/udp/kcp connections.</p>"},{"location":"api/reference/io_channel-class/#syntax","title":"Syntax","text":"<pre><code>namespace yasio { namespace inet { class io_channel; } }\n</code></pre>"},{"location":"api/reference/io_channel-class/#public-methods","title":"Public Methods","text":"Name Description io_channel::get_service Gets belong service of channel. io_channel::index Gets index of channel at service. io_channel::remote_port Gets remote port of channel."},{"location":"api/reference/io_channel-class/#remarks","title":"Remarks","text":"<p>Once io_service initialized, the max count of channel can't be changed.  Retrieves through <code>io_service::channel_at</code>.</p>"},{"location":"api/reference/io_channel-class/#io_channelget_service","title":"io_channel::get_service","text":"<p>Gets owner service.</p> <pre><code>io_service&amp; get_service()\n</code></pre>"},{"location":"api/reference/io_channel-class/#io_channelindex","title":"io_channel::index","text":"<p>Gets channel index at service.</p> <pre><code>int index() const\n</code></pre>"},{"location":"api/reference/io_channel-class/#io_channelremote_port","title":"io_channel::remote_port","text":"<p>Gets remote port.</p> <pre><code>u_short remote_port() const;\n</code></pre>"},{"location":"api/reference/io_channel-class/#return-value","title":"Return value","text":"<p>Return remote port of channel</p> <ul> <li>For client channel, it's port to connect.  </li> <li>For server channel, it's port to listen.</li> </ul>"},{"location":"api/reference/io_channel-class/#see-also","title":"See also","text":"<p>io_service Class</p> <p>io_event Class</p>"},{"location":"api/reference/io_event-class/","title":"io_event Class","text":"<p>The event produced by io_service thread.</p>"},{"location":"api/reference/io_event-class/#syntax","title":"Syntax","text":"<pre><code>namespace yasio { namespace inet { class io_event; } }\n</code></pre>"},{"location":"api/reference/io_event-class/#public-methods","title":"Public Methods","text":"Name Description io_event::kind Gets kind of event. io_event::status Gets status of event. io_event::packet Gets packet of event. io_event::timestamp Gets timestamp of event. io_event::transport Gets transport of event. io_event::transport_id Gets transport id of event. io_event::transport_udata Gets/Sets transport user data. <p>.. _kind:</p>"},{"location":"api/reference/io_event-class/#io_eventkind","title":"io_event::kind","text":"<p>Gets kind of event.</p> <pre><code>int kind() const;\n</code></pre>"},{"location":"api/reference/io_event-class/#return-value","title":"Return value","text":"<p>Return the kind value, can be follow values</p> <ul> <li><code>YEK_PACKET</code>: Packet event</li> <li><code>YEK_CONNECT_RESPONSE</code>: Connect response event</li> <li><code>YEK_CONNECTION_LOST</code>: Connection lost event</li> </ul>"},{"location":"api/reference/io_event-class/#io_eventstatus","title":"io_event::status","text":"<p>Gets the status of event.</p> <pre><code>int status() const;\n</code></pre>"},{"location":"api/reference/io_event-class/#return-value_1","title":"Return Value","text":"<ul> <li>0: No error</li> <li>NZ: error occured, user only needs print the error status code.</li> </ul>"},{"location":"api/reference/io_event-class/#io_eventpacket","title":"io_event::packet","text":"<p>Gets packet of event.</p> <pre><code>std::vector&lt;char&gt;&amp; packet()\n</code></pre>"},{"location":"api/reference/io_event-class/#return-value_2","title":"Return value","text":"<p>Return the mutable reference to packet of event, user can use std::move to move it.</p>"},{"location":"api/reference/io_event-class/#io_eventtimestamp","title":"io_event::timestamp","text":"<p>Get timestamp in microseconds of event.</p> <pre><code>highp_time_t timestamp() const;\n</code></pre>"},{"location":"api/reference/io_event-class/#return-value_3","title":"Return value","text":"<p>Return the timestamp in macroseconds.</p>"},{"location":"api/reference/io_event-class/#io_eventtransport_id","title":"io_event::transport_id","text":"<p>Gets transport unique id.</p> <pre><code>unsigned int transport_id() const;\n</code></pre>"},{"location":"api/reference/io_event-class/#return-value_4","title":"Return Value","text":"<p>Return a unique id range in 32 bit uint.</p>"},{"location":"api/reference/io_event-class/#io_eventtransport_udata","title":"io_event::transport_udata","text":"<p>Sets or Gets transport userdata.</p> <pre><code>template&lt;typename _Uty&gt;\n_Uty io_event::transport_udata();\n\ntemplate&lt;typename _Uty&gt;\nvoid io_event::transport_udata(_Uty uservalue);\n</code></pre>"},{"location":"api/reference/io_event-class/#remark","title":"Remark","text":"<p>User should manage the gc of userdata, such as:  </p> <ul> <li>Store userdata when receive connect success event.</li> <li>Cleanup the userdata when receive connection lost.</li> </ul>"},{"location":"api/reference/io_event-class/#see-also","title":"See also","text":"<p>io_service Class</p> <p>io_channel Class</p>"},{"location":"api/reference/io_service-class/","title":"io_service Class","text":"<p>Provides the functionality of <code>tcp, udp, kcp and ssl-client</code>  communication with noblocking-io model.</p>"},{"location":"api/reference/io_service-class/#syntax","title":"Syntax","text":"<pre><code>namespace yasio { namespace inet { class io_service; } }\n</code></pre>"},{"location":"api/reference/io_service-class/#members","title":"Members","text":""},{"location":"api/reference/io_service-class/#public-constructors","title":"Public Constructors","text":"Name Description io_service::io_service Constructs a <code>io_service</code> object."},{"location":"api/reference/io_service-class/#public-methods","title":"Public Methods","text":"Name Description io_service::start Start the network service thread. io_service::stop Stop the network service thread. io_service::open Open channel. io_service::close Close transport. io_service::is_open Tests whether channel or transport is open. io_service::dispatch Dispatch the network io events. io_service::write Sends data asynchronous. io_service::write_to Sends data to specific remote asynchronous. io_service::schedule Save the stream binary data to file. io_service::init_globals Init global data with print function callback. io_service::cleanup_globals Cleanup the global print function callback. io_service::channel_at Retrieves the channel by index. io_service::set_option Set options."},{"location":"api/reference/io_service-class/#remarks","title":"Remarks","text":"<p>By default, the transport use object_pool.</p>"},{"location":"api/reference/io_service-class/#requirements","title":"Requirements","text":"<p>Header: yasio.hpp</p>"},{"location":"api/reference/io_service-class/#io_serviceio_service","title":"io_service::io_service","text":"<p>Constructs a <code>io_service</code> object.</p> <pre><code>io_service::io_service();\n\nio_service::io_service(int channel_count);\n\nio_service::io_service(const io_hostent&amp; channel_ep);\n\nio_service::io_service(const io_hostent* channel_eps, int channel_count);\n</code></pre>"},{"location":"api/reference/io_service-class/#parameters","title":"Parameters","text":"<p>channel_count The channel count.</p> <p>channel_ep The channel endpoint.</p> <p>channel_eps The first pointer of channel endpoints.</p>"},{"location":"api/reference/io_service-class/#example","title":"Example","text":"<pre><code>#include \"yasio/yasio.hpp\"\nint main() {\n    using namespace yasio;\n    using namespace yasio::inet;\n    io_service s1; // s1 only support 1 channel\n    io_service s2(5); // s2 support 5 channels concurrency\n    io_service s3(io_hostent{\"github.com\", 443}); // s3 support 1 channel\n    io_hostent hosts[] = {  \n        {\"192.168.1.66\", 20336},\n        {\"192.168.1.88\", 20337},\n    };\n    io_service s4(hosts, YASIO_ARRAYSIZE(hosts)); // s4 support 2 channels concurrency\n    return 0;\n}\n</code></pre>"},{"location":"api/reference/io_service-class/#io_servicestart","title":"io_service::start","text":"<p>Start the network service thread.</p> <pre><code>void start(io_event_cb_t cb);\n</code></pre>"},{"location":"api/reference/io_service-class/#parameters_1","title":"Parameters","text":"<p>cb The callback to receive network io events.</p>"},{"location":"api/reference/io_service-class/#example_1","title":"Example","text":"<pre><code>#include \"yasio/yasio.hpp\"\nint main() {\n    using namespace yasio;\n    using namespace yasio::inet;\n    auto service = yasio_shared_service(io_hostent{host=\"ip138.com\", port=80});\n    service-&gt;start([](event_ptr&amp;&amp; ev) {\n    auto kind = ev-&gt;kind();\n    if (kind == YEK_CONNECT_RESPONSE)\n    {\n        if (ev-&gt;status() == 0)\n        printf(\"[%d] connect succeed.\\n\", ev-&gt;cindex());\n        else\n        printf(\"[%d] connect failed!\\n\", ev-&gt;cindex());\n    }\n    });\n    return 0;\n}\n</code></pre>"},{"location":"api/reference/io_service-class/#io_servicestop","title":"io_service::stop","text":"<p>Stop network service thread.</p> <pre><code>void stop()\n</code></pre>"},{"location":"api/reference/io_service-class/#remarks_1","title":"Remarks","text":"<p>If the network service thread running, this function will post exit signal and wait it exit properly.</p>"},{"location":"api/reference/io_service-class/#example_2","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/io_service-class/#io_serviceopen","title":"io_service::open","text":"<p>Open a channel.</p> <pre><code>void open(size_t cindex, int kind);\n</code></pre>"},{"location":"api/reference/io_service-class/#parameters_2","title":"Parameters","text":"<p>cindex The index of channel.</p> <p>kind The kind of channel.</p>"},{"location":"api/reference/io_service-class/#remarks_2","title":"Remarks","text":"<p>For tcp, will start the non-blocking 3 times handshake to establish tcp connection.</p> <p>The cindex value must be less than max channels supported by this io_service.</p> <p>The kind must be follow values</p> <ul> <li><code>YCK_TCP_CLIENT</code></li> <li><code>YCK_TCP_SERVER</code></li> <li><code>YCK_UDP_CLIENT</code></li> <li><code>YCK_UDP_SERVER</code></li> <li><code>YCK_KCP_CLIENT</code></li> <li><code>YCK_KCP_SERVER</code></li> <li><code>YCK_SSL_CLIENT</code></li> </ul>"},{"location":"api/reference/io_service-class/#example_3","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/io_service-class/#io_serviceclose","title":"io_service::close","text":"<p>Close the channel or transport.</p> <pre><code>void close(transport_handle_t transport);\n\nvoid close(int cindex);\n</code></pre>"},{"location":"api/reference/io_service-class/#parameters_3","title":"Parameters","text":"<p>transport The transport to be close.</p> <p>cindex The channel index to be close.</p>"},{"location":"api/reference/io_service-class/#remarks_3","title":"Remarks","text":"<p>For tcp, will trigger 4 times handsake to terminate the connection.</p>"},{"location":"api/reference/io_service-class/#example_4","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/io_service-class/#io_serviceis_open","title":"io_service::is_open","text":"<p>Tests whether the transport or channel is open.</p> <pre><code>bool is_open(transport_handle_t transport) const;\n\nbool is_open(int cindex) const;\n</code></pre>"},{"location":"api/reference/io_service-class/#parameters_4","title":"Parameters","text":"<p>transport The transport to be tests.</p> <p>cindex The index of channel to be tests.</p>"},{"location":"api/reference/io_service-class/#example_5","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/io_service-class/#io_servicedispatch","title":"io_service::dispatch","text":"<p>Consume network events queue and dispatch them.</p> <pre><code>void dispatch(int max_count);\n</code></pre>"},{"location":"api/reference/io_service-class/#parameters_5","title":"Parameters","text":"<p>max_count The max count allow to dispatch at this time.</p>"},{"location":"api/reference/io_service-class/#remarks_4","title":"Remarks","text":"<p>Usually, this function should call at logic thread, such as cocos2d-x render thread or other game engine main thread.</p> <p>It's useful to update game ui safety.</p>"},{"location":"api/reference/io_service-class/#example_6","title":"Example","text":"<pre><code>yasio_shared_service()-&gt;dispatch(128);\n</code></pre>"},{"location":"api/reference/io_service-class/#io_servicewrite","title":"io_service::write","text":"<p>Sends data asynchronous.</p> <pre><code>int write(\n    transport_handle_t thandle,\n    std::vector&lt;char&gt; buffer,\n    io_completion_cb_t completion_handler = nullptr\n);\n</code></pre>"},{"location":"api/reference/io_service-class/#parameters_6","title":"Parameters","text":"<p>thandle The transport handle to send.</p> <p>buffer The send buffer.</p> <p>completion_handler The completion handler for send operation.</p>"},{"location":"api/reference/io_service-class/#return-value","title":"Return Value","text":"<p>A number of bytes to sends, error occured when &lt; 0.</p>"},{"location":"api/reference/io_service-class/#remarks_5","title":"Remarks","text":"<p>The completion_handler not support KCP.</p> <p>The empty buffer will be ignored and not trigger completion_handler.</p>"},{"location":"api/reference/io_service-class/#example_7","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/io_service-class/#io_servicewrite_to","title":"io_service::write_to","text":"<p>Sends data asynchronous.</p> <pre><code>int write_to(\n    transport_handle_t thandle,\n    std::vector&lt;char&gt; buffer,\n    const ip::endpoint&amp; to,\n    io_completion_cb_t completion_handler = nullptr\n);\n</code></pre>"},{"location":"api/reference/io_service-class/#parameters_7","title":"Parameters","text":"<p>thandle The transport handle to send.</p> <p>buffer The send buffer.</p> <p>to The remote endpoint for send operation.</p> <p>completion_handler The completion handler for send operation.</p>"},{"location":"api/reference/io_service-class/#return-value_1","title":"Return Value","text":"<p>A number of bytes to be send, error occured when &lt; 0.</p>"},{"location":"api/reference/io_service-class/#remarks_6","title":"Remarks","text":"<p>This function only works for DGRAM transport <code>udp,kcp</code></p> <p>The completion_handler not support KCP.</p> <p>The empty buffer will be ignored and not trigger completion_handler.</p>"},{"location":"api/reference/io_service-class/#example_8","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/io_service-class/#io_serviceschedule","title":"io_service::schedule","text":"<p>Schedule a timer which will dispatch on the network service thread.</p> <pre><code>highp_timer_ptr schedule(\n    const std::chrono::microseconds&amp; duration,\n    timer_cb_t cb\n);\n</code></pre>"},{"location":"api/reference/io_service-class/#parameters_8","title":"Parameters","text":"<p>duration The timer expire duration.</p> <p>cb The callback to execute when the timer is expired.</p>"},{"location":"api/reference/io_service-class/#return-value_2","title":"Return Value","text":"<p>The shared_ptr of the high resolution timer.</p>"},{"location":"api/reference/io_service-class/#example_9","title":"Example","text":"<pre><code>// Register a once timer, timeout is 3 seconds.\nyasio_shared_service()-&gt;schedule(std::chrono::seconds(3), []()-&gt;bool{\n  printf(\"time called!\\n\");\n  return true;\n});\n\n// Register a loop timer, interval is 5 seconds.\nauto loopTimer = yasio_shared_service()-&gt;schedule(std::chrono::seconds(5), []()-&gt;bool{\n  printf(\"time called!\\n\");\n  return false;\n});\n</code></pre>"},{"location":"api/reference/io_service-class/#io_serviceinit_globals","title":"io_service::init_globals","text":"<p>Explicit init global data with print function callback.</p> <pre><code>static void init_globals(print_fn2_t print_fn);\n</code></pre>"},{"location":"api/reference/io_service-class/#parameters_9","title":"Parameters","text":"<p>print_fn The custom print function to print network service log.</p>"},{"location":"api/reference/io_service-class/#remarks_7","title":"Remarks","text":"<p>This function is optional, it's useful to redirect network service log to your custom log system, such as ue4,u3d, see the example.</p>"},{"location":"api/reference/io_service-class/#example_10","title":"Example","text":"<pre><code>// yasio_uelua.cpp\n// compile with: /EHsc\n#include \"yasio_uelua.h\"\n#include \"yasio/platform/yasio_ue4.hpp\"\n#include \"lua.hpp\"\n#if defined(NS_SLUA)\nusing namespace NS_SLUA;\n#endif\n#include \"yasio/bindings/lyasio.cpp\"\n\nDECLARE_LOG_CATEGORY_EXTERN(yasio_ue4, Log, All);\nDEFINE_LOG_CATEGORY(yasio_ue4);\n\nvoid yasio_uelua_init(void* L)\n{\n  auto Ls            = (lua_State*)L;\n  print_fn2_t log_cb = [](int level, const char* msg) {\n    FString text(msg);\n    const TCHAR* tstr = *text;\n    UE_LOG(yasio_ue4, Log, L\"%s\", tstr);\n  };\n  io_service::init_globals(log_cb);\n\n  luaregister_yasio(Ls);\n}\nvoid yasio_uelua_cleanup()\n{\n  io_service::cleanup_globals();\n}\n</code></pre>"},{"location":"api/reference/io_service-class/#io_servicecleanup_globals","title":"io_service::cleanup_globals","text":"<p>Clear custom print function object.</p> <pre><code>static void cleanup_globals();\n</code></pre>"},{"location":"api/reference/io_service-class/#remarks_8","title":"Remarks","text":"<p>You should call this function before unload a module(.dll,.so) which contains custom print function object.</p>"},{"location":"api/reference/io_service-class/#io_servicechannel_at","title":"io_service::channel_at","text":"<p>Retrieves channel by index.</p> <pre><code>io_channel* channel_at(size_t cindex) const;\n</code></pre>"},{"location":"api/reference/io_service-class/#parameters_10","title":"Parameters","text":"<p>cindex The index of channel.</p>"},{"location":"api/reference/io_service-class/#return-value_3","title":"Return value","text":"<p>The channel pointer, will be <code>nullptr</code> if the index out-of-range.</p>"},{"location":"api/reference/io_service-class/#io_serviceset_option","title":"io_service::set_option","text":"<p>Set current io_service option.</p> <pre><code>void set_option(int opt, ...);\n</code></pre>"},{"location":"api/reference/io_service-class/#parameters_11","title":"Parameters","text":"<p>opt The opt value, see YOPT_X_XXX.</p>"},{"location":"api/reference/io_service-class/#example_11","title":"Example","text":"<pre><code>#include \"yasio/yasio.hpp\"\n\nint main(){\n    using namespace yasio;\n    using namespace yasio::inet;\n    io_hostent hosts[] = {\n    {\"192.168.1.66\", 20336},\n    {\"192.168.1.88\", 20337},\n    };\n    auto service = std::make_shared&lt;io_service&gt;(hosts, YASIO_ARRAYSIZE(hosts));\n\n    // for application protocol with length field, you just needs set this option.\n    // it's similar to java netty length frame based decode.\n    // such as when your protocol define as following\n    //    packet.header: (header.len=12bytes)\n    //           code:int16_t\n    //           datalen:int32_t (not contains packet.header.len)\n    //           timestamp:int32_t\n    //           crc16:int16_t\n    //    packet.data\n    service-&gt;set_option(YOPT_C_LFBFD_PARAMS,\n                        0,     // channelIndex, the channel index\n                        65535, // maxFrameLength, max packet size\n                        2,     // lenghtFieldOffset, the offset of length field\n                        4,     // lengthFieldLength, the size of length field, can be 1,2,4\n                        12,    // lengthAdjustment\uff1aif the value of length feild == packet.header.len + packet.data.len, this parameter should be 0, otherwise should be sizeof(packet.header)\n    );\n\n    // for application protocol without length field, just sets length field size to -1.\n    // then io_service will dispatch any packet received from server immediately,\n    // such as http request, this is default behavior of channel.\n    service-&gt;set_option(YOPT_C_LFBFD_PARAMS, 1, 65535, -1, 0, 0);\n    return 0;\n}\n</code></pre>"},{"location":"api/reference/io_service-class/#see-also","title":"See also","text":"<p>io_event Class</p> <p>io_channel Class</p> <p>io_service Options</p> <p>xxsocket Class</p> <p>obstream Class</p> <p>ibstream_view Class</p> <p>ibstream Class</p>"},{"location":"api/reference/io_service-options/","title":"io_service options","text":"<p>The following are the io_service options.</p> Name Description YOPT_S_DEFER_EVENT_CB Set defer event callbackparams: callback:defer_event_cb_tremarks:a. User can do custom packet resolve at network thread, such as decompress and crc check.b. Return true, io_service will continue enque to event queue.c. Return false, io_service will drop the event. YOPT_S_DEFERRED_EVENT Set whether deferred dispatch event, default is: 1params: deferred_event:int(1) YOPT_S_RESOLV_FN Set custom resolve function, native C++ ONLYparams: func:resolv_fn_t* YOPT_S_PRINT_FN Set custom print function native C++ ONLYparmas: func:print_fn_tremarks: you must ensure thread safe of it YOPT_S_PRINT_FN2 Set custom print function with log levelparmas: func:print_fn2_tyou must ensure thread safe of it YOPT_S_EVENT_CB Set event callbackparams: func:event_cb_t* YOPT_S_TCP_KEEPALIVE Set tcp keepalive in seconds, probes is tries.params: idle:int(7200), interal:int(75), probes:int(10) YOPT_S_NO_NEW_THREAD Don't start a new thread to run event loop.params: value:int(0) YOPT_S_SSL_CACERT Sets ssl verification cert, if empty, don't verify.params: path:const char* YOPT_S_CONNECT_TIMEOUT Set connect timeout in seconds.params: connect_timeout:int(10) YOPT_S_DNS_CACHE_TIMEOUT Set dns cache timeout in seconds.params: dns_cache_timeout : int(600), YOPT_S_DNS_QUERIES_TIMEOUT Set dns queries timeout in seconds, default is: 5000.params: dns_queries_timeout : int(5000)remark: a. this option must be set before 'io_service::start'b. only works when have c-aresc. since v3.33.0 it's milliseconds, previous is seconds.d. the timeout algorithm of c-ares is complicated, usually, by default, dns querieswill failed with timeout after more than 75 seconds.e. for more detail, please see:https://c-ares.haxx.se/ares_init_options.html YOPT_S_DNS_QUERIES_TRIES Set dns queries tries when timeout reached, default is: 5.params: dns_queries_tries : int(5)remarks:a. this option must be set before 'io_service::start'b. relative option: YOPT_S_DNS_QUERIES_TIMEOUT YOPT_S_DNS_DIRTY Set dns server dirty.params: reserved : int(1)remarks:a. this option only works with c-ares enabledb. you should set this option after your mobile network changed YOPT_C_LFBFD_FN Sets channel length field based frame decode function.params: index:int, func:decode_len_fn_t*remark: native C++ ONLY YOPT_C_LFBFD_PARAMS Sets channel length field based frame decode params.params:index:int,max_frame_length:int(10MBytes),length_field_offset:int(-1),length_field_length:int(4),length_adjustment:int(0), YOPT_C_LFBFD_IBTS Sets channel length field based frame decode initial bytes to strip.params:index:int,initial_bytes_to_strip:int(0) YOPT_C_REMOTE_HOST Sets channel remote host.params: index:int, ip:const char* YOPT_C_REMOTE_PORT Sets channel remote port.params: index:int, port:int YOPT_C_REMOTE_ENDPOINT Sets channel remote endpoint.params: index:int, ip:const char*, port:int YOPT_C_LOCAL_HOST Sets local host for client channel only.params: index:int, ip:const char* YOPT_C_LOCAL_PORT Sets local port for client channel only.params: index:int, port:int YOPT_C_LOCAL_ENDPOINT Sets local endpoint for client channel only.params: index:int, ip:const char*, port:int YOPT_C_MOD_FLAGS Mods channl flags.params: index:int, flagsToAdd:int, flagsToRemove:int YOPT_C_ENABLE_MCAST Enable channel multicast mode.params: index:int, multi_addr:const char*, loopback:int YOPT_C_DISABLE_MCAST Disable channel multicast mode.params: index:int YOPT_C_KCP_CONV The kcp conv id, must equal in two endpoint from the same connection.params: index:int, conv:int YOPT_T_CONNECT Change 4-tuple association for io_transport_udp.params: transport:transport_handle_tremark: only works for udp client transport YOPT_T_DISCONNECT Dissolve 4-tuple association for io_transport_udp.params: transport:transport_handle_tremark: only works for udp client transport YOPT_B_SOCKOPT Sets io_base sockopt.params: io_base*,level:int,optname:int,optval:int,optlen:int"},{"location":"api/reference/io_service-options/#see-also","title":"See also","text":"<p>io_service Class</p>"},{"location":"api/reference/obstream-class/","title":"obstream Class","text":"<p>Provides the functionality of Binary Writer.</p>"},{"location":"api/reference/obstream-class/#syntax","title":"Syntax","text":"<pre><code>namespace yasio { \nusing obstream = basic_obstream&lt;endian::network_convert_tag&gt;;\n\n// The fast binary writer without byte order convertion.\nusing fast_obstream = basic_obstream&lt;endian::host_convert_tag&gt;;\n}\n</code></pre>"},{"location":"api/reference/obstream-class/#members","title":"Members","text":""},{"location":"api/reference/obstream-class/#public-constructors","title":"Public Constructors","text":"Name Description obstream::obstream Constructs a <code>obstream</code> object."},{"location":"api/reference/obstream-class/#public-methods","title":"Public Methods","text":"Name Description obstream::write Function template, write number value. obstream::write_ix Function template, write 7bit Encoded Int/Int64. obstream::write_v Write blob data with 7bit Encoded Int lenght field. obstream::write_byte Write 1 byte. obstream::write_bytes Write blob data without length field. obstream::empty Check is stream empty. obstream::data Retrieves stream data pointer. obstream::length Retrieves size of stream. obstream::buffer Retrieves the buffer object of the stream. obstream::save Save the stream binary data to file."},{"location":"api/reference/obstream-class/#remarks","title":"Remarks","text":"<p>When write int16~int64 and float/double, will auto convert host byte order to network byte order.</p>"},{"location":"api/reference/obstream-class/#requirements","title":"Requirements","text":"<p>Header: obstream.hpp</p>"},{"location":"api/reference/obstream-class/#obstreamobstream","title":"obstream::obstream","text":"<p>Constructs a <code>obstream</code> object.</p> <pre><code>obstream(size_t capacity = 128);\n\nobstream(const obstream&amp; rhs);\n\nobstream(obstream&amp;&amp; rhs);\n</code></pre>"},{"location":"api/reference/obstream-class/#example","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/obstream-class/#obstreamwrite","title":"obstream::write","text":"<p>Write number value to stream with byte order convertion.</p> <pre><code>template&lt;typename _Nty&gt;\nvoid obstream::write(_Nty value);\n</code></pre>"},{"location":"api/reference/obstream-class/#parameters","title":"Parameters","text":"<p>value The value to be written.</p>"},{"location":"api/reference/obstream-class/#remarks_1","title":"Remarks","text":"<p>The type _Nty of value could be any (1~8bytes) integral or float types </p>"},{"location":"api/reference/obstream-class/#example_1","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/obstream-class/#obstreamwrite_ix","title":"obstream::write_ix","text":"<p>Write 7Bit Encoded Int compressed value.</p> <pre><code>template&lt;typename _Intty&gt;\nvoid obstream::write_ix(_Intty value);\n</code></pre>"},{"location":"api/reference/obstream-class/#parameters_1","title":"Parameters","text":"<p>value The value to be written.</p>"},{"location":"api/reference/obstream-class/#remarks_2","title":"Remarks","text":"<p>The type _Intty of value must be one of follows</p> <ul> <li>int32_t</li> <li>int64_t</li> </ul> <p>This function behavior is compatible with dotnet</p> <ul> <li>BinaryWriter.Write7BitEncodedInt</li> <li>BinaryWriter.Write7BitEncodedInt64</li> </ul>"},{"location":"api/reference/obstream-class/#example_2","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/obstream-class/#obstreamwrite_v","title":"obstream::write_v","text":"<p>Write blob data with 7Bit Encoded Int length field.</p> <pre><code>void write_v(cxx17::string_view sv);\n</code></pre>"},{"location":"api/reference/obstream-class/#parameters_2","title":"Parameters","text":"<p>sv The string_view value to be written.</p>"},{"location":"api/reference/obstream-class/#remarks_3","title":"Remarks","text":"<p>This function will write length field with 7Bit Encoded first, then call write_bytes to write the value.</p>"},{"location":"api/reference/obstream-class/#example_3","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/obstream-class/#obstreamwrite_byte","title":"obstream::write_byte","text":"<p>Write 1 byte to stream.</p> <pre><code>void write_byte(uint8_t value);\n</code></pre>"},{"location":"api/reference/obstream-class/#parameters_3","title":"Parameters","text":"<p>value The value to be written.</p>"},{"location":"api/reference/obstream-class/#remarks_4","title":"Remarks","text":"<p>This function is identical to obstream::write"},{"location":"api/reference/obstream-class/#example_4","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/obstream-class/#obstreamwrite_bytes","title":"obstream::write_bytes","text":"<p>Write byte array to stream.</p> <pre><code>void write_bytes(cxx17::string_view sv);\n\nvoid write_bytes(const void* data, int length);\n\nvoid write_bytes(std::streamoff offset, const void* data, int length);\n</code></pre>"},{"location":"api/reference/obstream-class/#parameters_4","title":"Parameters","text":"<p>sv The string_view value to be written.</p> <p>data The data to be written.</p> <p>length The length data to be written.</p> <p>offset The offset of stream to be written.</p>"},{"location":"api/reference/obstream-class/#remarks_5","title":"Remarks","text":"<p>The value of <code>offset + length</code> must be less than <code>obstream::length</code></p>"},{"location":"api/reference/obstream-class/#example_5","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/obstream-class/#obstreamempty","title":"obstream::empty","text":"<p>Tests whether the obstream is empty.</p> <pre><code>bool empty() const;\n</code></pre>"},{"location":"api/reference/obstream-class/#return-value","title":"Return Value","text":"<p><code>true</code> if the obstream empty; <code>false</code> if it has at least one byte.</p>"},{"location":"api/reference/obstream-class/#remarks_6","title":"Remarks","text":"<p>The member function is equivalent to length == 0.</p>"},{"location":"api/reference/obstream-class/#example_6","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/obstream-class/#obstreamdata","title":"obstream::data","text":"<p>Retrieves stream data pointer.</p> <pre><code>const char* data() const;\n\nchar* data();\n</code></pre>"},{"location":"api/reference/obstream-class/#return-value_1","title":"Return Value","text":"<p>A pointer to the first byte in the stream.</p>"},{"location":"api/reference/obstream-class/#example_7","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/obstream-class/#obstreamlength","title":"obstream::length","text":"<p>Returns the number of bytes in the stream.</p> <pre><code>size_t length() const;\n</code></pre>"},{"location":"api/reference/obstream-class/#return-value_2","title":"Return Value","text":"<p>The current length of the stream.</p>"},{"location":"api/reference/obstream-class/#example_8","title":"Example","text":"<p>TODO:</p>"},{"location":"api/reference/obstream-class/#obstreambuffer","title":"obstream::buffer","text":"<p>Retrieves internal buffer of stream.</p> <pre><code>const std::vector&lt;char&gt;&amp; buffer() const;\n\nstd::vector&lt;char&gt;&amp; buffer();\n</code></pre>"},{"location":"api/reference/obstream-class/#return-value_3","title":"Return Value","text":"<p>The internal implementation buffer of the stream.</p>"},{"location":"api/reference/obstream-class/#example_9","title":"Example","text":"<pre><code>// obstream_buffer.cpp\n// compile with: /EHsc\n#include \"yasio/obstream.hpp\"\n\nint main( )\n{\n   using namespace yasio;\n   using namespace cxx17;\n\n   obstream obs;\n   obs.write_v(\"hello world!\");\n\n   const auto&amp; const_buffer = obs.buffer();\n\n   // after this line, the obs will be empty\n   auto move_buffer = std::move(obs.buffer());\n\n   return 0;\n}\n</code></pre>"},{"location":"api/reference/obstream-class/#obstreamsave","title":"obstream::save","text":"<p>Save the stream data to file.</p> <pre><code>void save(const char* filename) const;\n</code></pre>"},{"location":"api/reference/obstream-class/#example_10","title":"Example","text":"<pre><code>// obstream_save.cpp\n// compile with: /EHsc\n#include \"yasio/obstream.hpp\"\n#include \"yasio/ibstream.hpp\"\n\nint main( )\n{\n   using namespace yasio;\n   using namespace cxx17;\n\n   obstream obs;\n   obs.write_v(\"hello world!\");\n   obs.save(\"obstream_save.bin\");\n\n   ibstream ibs;\n   if(ibs.load(\"obstream_save.bin\")) {\n       // output should be: hello world!\n       try {\n           std::count &lt;&lt; ibs.read_v() &lt;&lt; \"\\n\";\n       }\n       catch(const std::exception&amp; ex) {\n           std::count &lt;&lt; \"read_v fail: \" &lt;&lt;\n               &lt;&lt; ex.message() &lt;&lt; \"\\n\";\n       }\n   }\n\n   return 0;\n}\n</code></pre>"},{"location":"api/reference/obstream-class/#see-also","title":"See also","text":"<p>ibstream_view Class</p> <p>ibstream Class</p>"},{"location":"api/reference/xxsocket-class/","title":"xxsocket Class","text":"<p>Provides the functionality of low-level socket based on POSIX socket APIs, support std::move</p>"},{"location":"api/reference/xxsocket-class/#syntax","title":"Syntax","text":"<pre><code>namespace yasio { namespace inet { class xxsocket; } }\n</code></pre>"},{"location":"api/reference/xxsocket-class/#members","title":"Members","text":"Name Description xxsocket::xxsocket Constructs a <code>xxsocket</code> object."},{"location":"api/reference/xxsocket-class/#public-methods","title":"Public Methods","text":"Name Description xxsocket::xpconnect Cnnect remote via tcp. xxsocket::xpconnect_n Connect remote via tcp non-blocking. xxsocket::pconnect Connect remote via tcp. xxsocket::pconnect_n Connect remote via tcp non-blocking. xxsocket::pserve Create socket as tcp server. xxsocket::swap Swap socket handle. xxsocket::open Open a socket. xxsocket::reopen Reopen a socket. xxsocket::is_open Check whether socket opened. xxsocket::native_handle Gets socket handle. xxsocket::release_handle Release ownership of socket handle. xxsocket::set_nonblocking Sets socket non-blocking mode. xxsocket::test_nonblocking Test whether socket is non-blocking mode. xxsocket::bind Bind socket with specific address. xxsocket::bind_any Bind socket with any address. xxsocket::listen Listen a tcp socket. xxsocket::accept Accept a tcp socket. xxsocket::accept_n Accept a tcp socket non-blocking. xxsocket::connect Connect a socket. xxsocket::connect_n Connect a socket non-blocking. xxsocket::send Send data on the socket. xxsocket::send_n Send data on the socket non-blocking. xxsocket::recv Receive data from the socket. xxsocket::recv_n Receive data from the socket non-blocking. xxsocket::sendto Send data to a DGRAM socket. xxsocket::recvfrom Send data to a DGRAM socket non-blocking. xxsocket::handle_write_ready Wait socket ready to write. xxsocket::handle_read_ready Wait socket ready to read. xxsocket::local_endpoint Gets local endpoint of socket. xxsocket::peer_endpoint Gets peer endpoint of socket. xxsocket::set_keepalive Sets tcp socket keepalive. xxsocket::reuse_address Sets socket reuse address. xxsocket::exclusive_address Sets socket exclusive address. xxsocket::select Select event ready for socket. xxsocket::shutdown Shutdown socket. xxsocket::close Close socket. xxsocket::tcp_rtt Gets tcp socket rtt. xxsocket::get_last_errno Gets last socket error. xxsocket::set_last_errno Sets last socket error. xxsocket::strerror Translate socket error code to string. xxsocket::gai_strerror Translate getaddrinfo error code to string. xxsocket::resolve Resolve domain. xxsocket::resolve_v4 Resolve domain ipv4 address. xxsocket::resolve_v6 Resolve domain ipv6 address. xxsocket::resolve_v4to6 Resolve ipv4 address and convert to ipv6 V4MAPPED format. xxsocket::resolve_tov6 Resolve all address, convert ipv4 address to ipv6 V4MAPPED format. xxsocket::getipsv Get local supported ip stack flags. xxsocket::traverse_local_address Traverse local address."},{"location":"api/reference/xxsocket-class/#see-also","title":"See also","text":"<p>io_service Class</p>"}]}